<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="1091" failures="0" time="30.305">
  <testsuite name="posts" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:22" time="2.708" tests="210">
    <testcase classname="posts received a single post (RECEIVED_POST) should add a new post" name="posts received a single post (RECEIVED_POST) should add a new post" time="0.003">
    </testcase>
    <testcase classname="posts received a single post (RECEIVED_POST) should add a new pending post" name="posts received a single post (RECEIVED_POST) should add a new pending post" time="0.001">
    </testcase>
    <testcase classname="posts received a single post (RECEIVED_POST) should update an existing post" name="posts received a single post (RECEIVED_POST) should update an existing post" time="0.001">
    </testcase>
    <testcase classname="posts received a single post (RECEIVED_POST) should remove any pending posts when receiving the actual post" name="posts received a single post (RECEIVED_POST) should remove any pending posts when receiving the actual post" time="0.001">
    </testcase>
    <testcase classname="posts received a single post (RECEIVED_NEW_POST) should add a new post" name="posts received a single post (RECEIVED_NEW_POST) should add a new post" time="0.001">
    </testcase>
    <testcase classname="posts received a single post (RECEIVED_NEW_POST) should add a new pending post" name="posts received a single post (RECEIVED_NEW_POST) should add a new pending post" time="0.001">
    </testcase>
    <testcase classname="posts received a single post (RECEIVED_NEW_POST) should update an existing post" name="posts received a single post (RECEIVED_NEW_POST) should update an existing post" time="0">
    </testcase>
    <testcase classname="posts received a single post (RECEIVED_NEW_POST) should remove any pending posts when receiving the actual post" name="posts received a single post (RECEIVED_NEW_POST) should remove any pending posts when receiving the actual post" time="0.002">
    </testcase>
    <testcase classname="posts received multiple posts should do nothing when post list is empty" name="posts received multiple posts should do nothing when post list is empty" time="0.001">
    </testcase>
    <testcase classname="posts received multiple posts should add new posts" name="posts received multiple posts should add new posts" time="0.001">
    </testcase>
    <testcase classname="posts received multiple posts should update existing posts unless we have a more recent version" name="posts received multiple posts should update existing posts unless we have a more recent version" time="0.001">
    </testcase>
    <testcase classname="posts received multiple posts should set state for deleted posts" name="posts received multiple posts should set state for deleted posts" time="0.001">
    </testcase>
    <testcase classname="posts received multiple posts should remove any pending posts when receiving the actual post" name="posts received multiple posts should remove any pending posts when receiving the actual post" time="0">
    </testcase>
    <testcase classname="posts received multiple posts should not add channelId entity to postsInChannel if there were no posts in channel and it has receivedNewPosts on action" name="posts received multiple posts should not add channelId entity to postsInChannel if there were no posts in channel and it has receivedNewPosts on action" time="0.001">
    </testcase>
    <testcase classname="posts deleting a post (POST_DELETED) should mark the post as deleted and remove the rest of the thread" name="posts deleting a post (POST_DELETED) should mark the post as deleted and remove the rest of the thread" time="0.001">
    </testcase>
    <testcase classname="posts deleting a post (POST_DELETED) should not remove the rest of the thread when deleting a comment" name="posts deleting a post (POST_DELETED) should not remove the rest of the thread when deleting a comment" time="0.001">
    </testcase>
    <testcase classname="posts deleting a post (POST_DELETED) should do nothing if the post is not loaded" name="posts deleting a post (POST_DELETED) should do nothing if the post is not loaded" time="0">
    </testcase>
    <testcase classname="posts removing a post (POST_REMOVED) should remove the post and the rest and the rest of the thread" name="posts removing a post (POST_REMOVED) should remove the post and the rest and the rest of the thread" time="0.001">
    </testcase>
    <testcase classname="posts removing a post (POST_REMOVED) should not remove the rest of the thread when removing a comment" name="posts removing a post (POST_REMOVED) should not remove the rest of the thread when removing a comment" time="0.001">
    </testcase>
    <testcase classname="posts removing a post (POST_REMOVED) should do nothing if the post is not loaded" name="posts removing a post (POST_REMOVED) should do nothing if the post is not loaded" time="0">
    </testcase>
    <testcase classname="posts when a channel is deleted (RECEIVED_CHANNEL_DELETED) should remove any posts in that channel" name="posts when a channel is deleted (RECEIVED_CHANNEL_DELETED) should remove any posts in that channel" time="0.001">
    </testcase>
    <testcase classname="posts when a channel is deleted (RECEIVED_CHANNEL_DELETED) should do nothing if no posts in that channel are loaded" name="posts when a channel is deleted (RECEIVED_CHANNEL_DELETED) should do nothing if no posts in that channel are loaded" time="0.001">
    </testcase>
    <testcase classname="posts when a channel is deleted (RECEIVED_CHANNEL_DELETED) should not remove any posts with viewArchivedChannels enabled" name="posts when a channel is deleted (RECEIVED_CHANNEL_DELETED) should not remove any posts with viewArchivedChannels enabled" time="0">
    </testcase>
    <testcase classname="posts when a channel is deleted (DELETE_CHANNEL_SUCCESS) should remove any posts in that channel" name="posts when a channel is deleted (DELETE_CHANNEL_SUCCESS) should remove any posts in that channel" time="0.001">
    </testcase>
    <testcase classname="posts when a channel is deleted (DELETE_CHANNEL_SUCCESS) should do nothing if no posts in that channel are loaded" name="posts when a channel is deleted (DELETE_CHANNEL_SUCCESS) should do nothing if no posts in that channel are loaded" time="0">
    </testcase>
    <testcase classname="posts when a channel is deleted (DELETE_CHANNEL_SUCCESS) should not remove any posts with viewArchivedChannels enabled" name="posts when a channel is deleted (DELETE_CHANNEL_SUCCESS) should not remove any posts with viewArchivedChannels enabled" time="0.001">
    </testcase>
    <testcase classname="posts when a channel is deleted (LEAVE_CHANNEL) should remove any posts in that channel" name="posts when a channel is deleted (LEAVE_CHANNEL) should remove any posts in that channel" time="0.001">
    </testcase>
    <testcase classname="posts when a channel is deleted (LEAVE_CHANNEL) should do nothing if no posts in that channel are loaded" name="posts when a channel is deleted (LEAVE_CHANNEL) should do nothing if no posts in that channel are loaded" time="0">
    </testcase>
    <testcase classname="posts when a channel is deleted (LEAVE_CHANNEL) should not remove any posts with viewArchivedChannels enabled" name="posts when a channel is deleted (LEAVE_CHANNEL) should not remove any posts with viewArchivedChannels enabled" time="0.001">
    </testcase>
    <testcase classname="pendingPostIds making a new pending post should add new entries for pending posts" name="pendingPostIds making a new pending post should add new entries for pending posts" time="0.001">
    </testcase>
    <testcase classname="pendingPostIds making a new pending post should not add duplicate entries" name="pendingPostIds making a new pending post should not add duplicate entries" time="0">
    </testcase>
    <testcase classname="pendingPostIds making a new pending post should do nothing for regular posts" name="pendingPostIds making a new pending post should do nothing for regular posts" time="0">
    </testcase>
    <testcase classname="pendingPostIds removing a pending post should remove an entry when its post is deleted" name="pendingPostIds removing a pending post should remove an entry when its post is deleted" time="0.001">
    </testcase>
    <testcase classname="pendingPostIds removing a pending post should do nothing without an entry for the post" name="pendingPostIds removing a pending post should do nothing without an entry for the post" time="0">
    </testcase>
    <testcase classname="pendingPostIds marking a pending post as completed should remove an entry when its post is successfully created" name="pendingPostIds marking a pending post as completed should remove an entry when its post is successfully created" time="0.001">
    </testcase>
    <testcase classname="pendingPostIds marking a pending post as completed should do nothing without an entry for the post" name="pendingPostIds marking a pending post as completed should do nothing without an entry for the post" time="0">
    </testcase>
    <testcase classname="pendingPostIds marking a pending post as completed should do nothing when receiving a non-pending post" name="pendingPostIds marking a pending post as completed should do nothing when receiving a non-pending post" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving a new post should do nothing without posts loaded for the channel" name="postsInChannel receiving a new post should do nothing without posts loaded for the channel" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving a new post should store the new post when the channel is empty" name="postsInChannel receiving a new post should store the new post when the channel is empty" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving a new post should store the new post when the channel has recent posts" name="postsInChannel receiving a new post should store the new post when the channel has recent posts" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving a new post should not store the new post when the channel only has older posts" name="postsInChannel receiving a new post should not store the new post when the channel only has older posts" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving a new post should do nothing for a duplicate post" name="postsInChannel receiving a new post should do nothing for a duplicate post" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving a new post should remove a previously pending post" name="postsInChannel receiving a new post should remove a previously pending post" time="0">
    </testcase>
    <testcase classname="postsInChannel receiving a new post should just add the new post if the pending post was already removed" name="postsInChannel receiving a new post should just add the new post if the pending post was already removed" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving a new post should not include a previously removed post" name="postsInChannel receiving a new post should not include a previously removed post" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving a single post should replace a previously pending post" name="postsInChannel receiving a single post should replace a previously pending post" time="0">
    </testcase>
    <testcase classname="postsInChannel receiving a single post should do nothing for a pending post that was already removed" name="postsInChannel receiving a single post should do nothing for a pending post that was already removed" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving a single post should do nothing for a post that was not previously pending" name="postsInChannel receiving a single post should do nothing for a post that was not previously pending" time="0">
    </testcase>
    <testcase classname="postsInChannel receiving a single post should do nothing for a post without posts loaded for the channel" name="postsInChannel receiving a single post should do nothing for a post without posts loaded for the channel" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving consecutive recent posts in the channel should save posts in the correct order" name="postsInChannel receiving consecutive recent posts in the channel should save posts in the correct order" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving consecutive recent posts in the channel should not save duplicate posts" name="postsInChannel receiving consecutive recent posts in the channel should not save duplicate posts" time="0">
    </testcase>
    <testcase classname="postsInChannel receiving consecutive recent posts in the channel should do nothing when receiving no posts for loaded channel" name="postsInChannel receiving consecutive recent posts in the channel should do nothing when receiving no posts for loaded channel" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving consecutive recent posts in the channel should make entry for channel with no posts" name="postsInChannel receiving consecutive recent posts in the channel should make entry for channel with no posts" time="0">
    </testcase>
    <testcase classname="postsInChannel receiving consecutive recent posts in the channel should not save posts that are not in data.order" name="postsInChannel receiving consecutive recent posts in the channel should not save posts that are not in data.order" time="0">
    </testcase>
    <testcase classname="postsInChannel receiving consecutive recent posts in the channel should not save posts in an older block, even if they may be adjacent" name="postsInChannel receiving consecutive recent posts in the channel should not save posts in an older block, even if they may be adjacent" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving consecutive recent posts in the channel should not save posts in the recent block even if new posts may be adjacent" name="postsInChannel receiving consecutive recent posts in the channel should not save posts in the recent block even if new posts may be adjacent" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving consecutive recent posts in the channel should add posts to non-recent block if there is overlap" name="postsInChannel receiving consecutive recent posts in the channel should add posts to non-recent block if there is overlap" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving consecutive posts in the channel that are not recent should save posts in the correct order" name="postsInChannel receiving consecutive posts in the channel that are not recent should save posts in the correct order" time="0">
    </testcase>
    <testcase classname="postsInChannel receiving consecutive posts in the channel that are not recent should not save duplicate posts" name="postsInChannel receiving consecutive posts in the channel that are not recent should not save duplicate posts" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving consecutive posts in the channel that are not recent should do nothing when receiving no posts for loaded channel" name="postsInChannel receiving consecutive posts in the channel that are not recent should do nothing when receiving no posts for loaded channel" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving consecutive posts in the channel that are not recent should make entry for channel with no posts" name="postsInChannel receiving consecutive posts in the channel that are not recent should make entry for channel with no posts" time="0">
    </testcase>
    <testcase classname="postsInChannel receiving consecutive posts in the channel that are not recent should not save posts that are not in data.order" name="postsInChannel receiving consecutive posts in the channel that are not recent should not save posts that are not in data.order" time="0">
    </testcase>
    <testcase classname="postsInChannel receiving consecutive posts in the channel that are not recent should not save posts in another block without overlap" name="postsInChannel receiving consecutive posts in the channel that are not recent should not save posts in another block without overlap" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving consecutive posts in the channel that are not recent should add posts to recent block if there is overlap" name="postsInChannel receiving consecutive posts in the channel that are not recent should add posts to recent block if there is overlap" time="0">
    </testcase>
    <testcase classname="postsInChannel receiving posts since should save posts in the channel in the correct order" name="postsInChannel receiving posts since should save posts in the channel in the correct order" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving posts since should not save older posts" name="postsInChannel receiving posts since should not save older posts" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving posts since should save any posts in between" name="postsInChannel receiving posts since should save any posts in between" time="0">
    </testcase>
    <testcase classname="postsInChannel receiving posts since should do nothing if only receiving updated posts" name="postsInChannel receiving posts since should do nothing if only receiving updated posts" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving posts since should not save duplicate posts" name="postsInChannel receiving posts since should not save duplicate posts" time="0">
    </testcase>
    <testcase classname="postsInChannel receiving posts since should do nothing when receiving no posts for loaded channel" name="postsInChannel receiving posts since should do nothing when receiving no posts for loaded channel" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving posts since should do nothing for channel with no posts" name="postsInChannel receiving posts since should do nothing for channel with no posts" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving posts since should not save posts that are not in data.order" name="postsInChannel receiving posts since should not save posts that are not in data.order" time="0">
    </testcase>
    <testcase classname="postsInChannel receiving posts since should not save posts in an older block" name="postsInChannel receiving posts since should not save posts in an older block" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving posts since should always save posts in the recent block" name="postsInChannel receiving posts since should always save posts in the recent block" time="0">
    </testcase>
    <testcase classname="postsInChannel receiving posts after should save posts when channel is not loaded" name="postsInChannel receiving posts after should save posts when channel is not loaded" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving posts after should save posts when channel is empty" name="postsInChannel receiving posts after should save posts when channel is empty" time="0">
    </testcase>
    <testcase classname="postsInChannel receiving posts after should add posts to existing block" name="postsInChannel receiving posts after should add posts to existing block" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving posts after should merge adjacent posts if we have newer posts" name="postsInChannel receiving posts after should merge adjacent posts if we have newer posts" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving posts after should do nothing when no posts are received" name="postsInChannel receiving posts after should do nothing when no posts are received" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving posts before should save posts when channel is not loaded" name="postsInChannel receiving posts before should save posts when channel is not loaded" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving posts before should save posts when channel is empty" name="postsInChannel receiving posts before should save posts when channel is empty" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving posts before should add posts to existing block" name="postsInChannel receiving posts before should add posts to existing block" time="0">
    </testcase>
    <testcase classname="postsInChannel receiving posts before should merge adjacent posts if we have newer posts" name="postsInChannel receiving posts before should merge adjacent posts if we have newer posts" time="0.001">
    </testcase>
    <testcase classname="postsInChannel receiving posts before should do nothing when no posts are received" name="postsInChannel receiving posts before should do nothing when no posts are received" time="0.001">
    </testcase>
    <testcase classname="postsInChannel deleting a post should do nothing when deleting a post without comments" name="postsInChannel deleting a post should do nothing when deleting a post without comments" time="0.001">
    </testcase>
    <testcase classname="postsInChannel deleting a post should remove comments on the post when deleting a post with comments" name="postsInChannel deleting a post should remove comments on the post when deleting a post with comments" time="0.001">
    </testcase>
    <testcase classname="postsInChannel deleting a post should remove comments from multiple blocks" name="postsInChannel deleting a post should remove comments from multiple blocks" time="0.001">
    </testcase>
    <testcase classname="postsInChannel deleting a post should do nothing to blocks without comments" name="postsInChannel deleting a post should do nothing to blocks without comments" time="0">
    </testcase>
    <testcase classname="postsInChannel deleting a post should do nothing when deleting a comment" name="postsInChannel deleting a post should do nothing when deleting a comment" time="0.001">
    </testcase>
    <testcase classname="postsInChannel deleting a post should do nothing if the post has not been loaded" name="postsInChannel deleting a post should do nothing if the post has not been loaded" time="0">
    </testcase>
    <testcase classname="postsInChannel deleting a post should do nothing if no posts in the channel have been loaded" name="postsInChannel deleting a post should do nothing if no posts in the channel have been loaded" time="0.001">
    </testcase>
    <testcase classname="postsInChannel deleting a post should remove empty blocks" name="postsInChannel deleting a post should remove empty blocks" time="0">
    </testcase>
    <testcase classname="postsInChannel removing a post should remove the post" name="postsInChannel removing a post should remove the post" time="0.001">
    </testcase>
    <testcase classname="postsInChannel removing a post should remove comments on the post" name="postsInChannel removing a post should remove comments on the post" time="0.001">
    </testcase>
    <testcase classname="postsInChannel removing a post should remove a comment without removing the root post" name="postsInChannel removing a post should remove a comment without removing the root post" time="0">
    </testcase>
    <testcase classname="postsInChannel removing a post should do nothing if the post has not been loaded" name="postsInChannel removing a post should do nothing if the post has not been loaded" time="0.001">
    </testcase>
    <testcase classname="postsInChannel removing a post should do nothing if no posts in the channel have been loaded" name="postsInChannel removing a post should do nothing if no posts in the channel have been loaded" time="0">
    </testcase>
    <testcase classname="postsInChannel removing a post should remove empty blocks" name="postsInChannel removing a post should remove empty blocks" time="0.001">
    </testcase>
    <testcase classname="postsInChannel when a channel is deleted (RECEIVED_CHANNEL_DELETED) should remove any posts in that channel" name="postsInChannel when a channel is deleted (RECEIVED_CHANNEL_DELETED) should remove any posts in that channel" time="0">
    </testcase>
    <testcase classname="postsInChannel when a channel is deleted (RECEIVED_CHANNEL_DELETED) should do nothing if no posts in that channel are loaded" name="postsInChannel when a channel is deleted (RECEIVED_CHANNEL_DELETED) should do nothing if no posts in that channel are loaded" time="0">
    </testcase>
    <testcase classname="postsInChannel when a channel is deleted (RECEIVED_CHANNEL_DELETED) should not remove any posts with viewArchivedChannels enabled" name="postsInChannel when a channel is deleted (RECEIVED_CHANNEL_DELETED) should not remove any posts with viewArchivedChannels enabled" time="0.001">
    </testcase>
    <testcase classname="postsInChannel when a channel is deleted (DELETE_CHANNEL_SUCCESS) should remove any posts in that channel" name="postsInChannel when a channel is deleted (DELETE_CHANNEL_SUCCESS) should remove any posts in that channel" time="0.001">
    </testcase>
    <testcase classname="postsInChannel when a channel is deleted (DELETE_CHANNEL_SUCCESS) should do nothing if no posts in that channel are loaded" name="postsInChannel when a channel is deleted (DELETE_CHANNEL_SUCCESS) should do nothing if no posts in that channel are loaded" time="0">
    </testcase>
    <testcase classname="postsInChannel when a channel is deleted (DELETE_CHANNEL_SUCCESS) should not remove any posts with viewArchivedChannels enabled" name="postsInChannel when a channel is deleted (DELETE_CHANNEL_SUCCESS) should not remove any posts with viewArchivedChannels enabled" time="0.001">
    </testcase>
    <testcase classname="postsInChannel when a channel is deleted (LEAVE_CHANNEL) should remove any posts in that channel" name="postsInChannel when a channel is deleted (LEAVE_CHANNEL) should remove any posts in that channel" time="0.001">
    </testcase>
    <testcase classname="postsInChannel when a channel is deleted (LEAVE_CHANNEL) should do nothing if no posts in that channel are loaded" name="postsInChannel when a channel is deleted (LEAVE_CHANNEL) should do nothing if no posts in that channel are loaded" time="0">
    </testcase>
    <testcase classname="postsInChannel when a channel is deleted (LEAVE_CHANNEL) should not remove any posts with viewArchivedChannels enabled" name="postsInChannel when a channel is deleted (LEAVE_CHANNEL) should not remove any posts with viewArchivedChannels enabled" time="0.001">
    </testcase>
    <testcase classname="mergePostBlocks should do nothing with no blocks" name="mergePostBlocks should do nothing with no blocks" time="0.001">
    </testcase>
    <testcase classname="mergePostBlocks should do nothing with only one block" name="mergePostBlocks should do nothing with only one block" time="0">
    </testcase>
    <testcase classname="mergePostBlocks should do nothing with two separate blocks" name="mergePostBlocks should do nothing with two separate blocks" time="0">
    </testcase>
    <testcase classname="mergePostBlocks should merge two blocks containing exactly the same posts" name="mergePostBlocks should merge two blocks containing exactly the same posts" time="0.001">
    </testcase>
    <testcase classname="mergePostBlocks should merge two blocks containing overlapping posts" name="mergePostBlocks should merge two blocks containing overlapping posts" time="0.001">
    </testcase>
    <testcase classname="mergePostBlocks should merge more than two blocks containing overlapping posts" name="mergePostBlocks should merge more than two blocks containing overlapping posts" time="0.001">
    </testcase>
    <testcase classname="mergePostBlocks should not affect blocks that are not merged" name="mergePostBlocks should not affect blocks that are not merged" time="0">
    </testcase>
    <testcase classname="mergePostBlocks should keep merged blocks marked as recent" name="mergePostBlocks should keep merged blocks marked as recent" time="0.002">
    </testcase>
    <testcase classname="mergePostBlocks should remove empty blocks" name="mergePostBlocks should remove empty blocks" time="0">
    </testcase>
    <testcase classname="mergePostOrder empty arrays" name="mergePostOrder empty arrays" time="0.001">
    </testcase>
    <testcase classname="mergePostOrder empty left array" name="mergePostOrder empty left array" time="0.001">
    </testcase>
    <testcase classname="mergePostOrder empty right array" name="mergePostOrder empty right array" time="0">
    </testcase>
    <testcase classname="mergePostOrder distinct arrays" name="mergePostOrder distinct arrays" time="0.001">
    </testcase>
    <testcase classname="mergePostOrder overlapping arrays" name="mergePostOrder overlapping arrays" time="0">
    </testcase>
    <testcase classname="mergePostOrder left array is start of right array" name="mergePostOrder left array is start of right array" time="0.001">
    </testcase>
    <testcase classname="mergePostOrder right array is end of left array" name="mergePostOrder right array is end of left array" time="0">
    </testcase>
    <testcase classname="mergePostOrder left array contains right array" name="mergePostOrder left array contains right array" time="0.001">
    </testcase>
    <testcase classname="mergePostOrder items in second array missing from first" name="mergePostOrder items in second array missing from first" time="0">
    </testcase>
    <testcase classname="postsInThread receiving a single post (RECEIVED_POST) should replace a previously pending comment" name="postsInThread receiving a single post (RECEIVED_POST) should replace a previously pending comment" time="0">
    </testcase>
    <testcase classname="postsInThread receiving a single post (RECEIVED_POST) should do nothing for a pending comment that was already removed" name="postsInThread receiving a single post (RECEIVED_POST) should do nothing for a pending comment that was already removed" time="0.001">
    </testcase>
    <testcase classname="postsInThread receiving a single post (RECEIVED_POST) should store a comment that was not previously pending" name="postsInThread receiving a single post (RECEIVED_POST) should store a comment that was not previously pending" time="0">
    </testcase>
    <testcase classname="postsInThread receiving a single post (RECEIVED_POST) should store a comment without other comments loaded for the thread" name="postsInThread receiving a single post (RECEIVED_POST) should store a comment without other comments loaded for the thread" time="0.001">
    </testcase>
    <testcase classname="postsInThread receiving a single post (RECEIVED_POST) should do nothing for a non-comment post" name="postsInThread receiving a single post (RECEIVED_POST) should do nothing for a non-comment post" time="0.001">
    </testcase>
    <testcase classname="postsInThread receiving a single post (RECEIVED_POST) should do nothing for a duplicate post" name="postsInThread receiving a single post (RECEIVED_POST) should do nothing for a duplicate post" time="0">
    </testcase>
    <testcase classname="postsInThread receiving a single post (RECEIVED_NEW_POST) should replace a previously pending comment" name="postsInThread receiving a single post (RECEIVED_NEW_POST) should replace a previously pending comment" time="0.001">
    </testcase>
    <testcase classname="postsInThread receiving a single post (RECEIVED_NEW_POST) should do nothing for a pending comment that was already removed" name="postsInThread receiving a single post (RECEIVED_NEW_POST) should do nothing for a pending comment that was already removed" time="0">
    </testcase>
    <testcase classname="postsInThread receiving a single post (RECEIVED_NEW_POST) should store a comment that was not previously pending" name="postsInThread receiving a single post (RECEIVED_NEW_POST) should store a comment that was not previously pending" time="0.001">
    </testcase>
    <testcase classname="postsInThread receiving a single post (RECEIVED_NEW_POST) should store a comment without other comments loaded for the thread" name="postsInThread receiving a single post (RECEIVED_NEW_POST) should store a comment without other comments loaded for the thread" time="0">
    </testcase>
    <testcase classname="postsInThread receiving a single post (RECEIVED_NEW_POST) should do nothing for a non-comment post" name="postsInThread receiving a single post (RECEIVED_NEW_POST) should do nothing for a non-comment post" time="0.001">
    </testcase>
    <testcase classname="postsInThread receiving a single post (RECEIVED_NEW_POST) should do nothing for a duplicate post" name="postsInThread receiving a single post (RECEIVED_NEW_POST) should do nothing for a duplicate post" time="0">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_AFTER) should save comments without in the correct threads without sorting" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_AFTER) should save comments without in the correct threads without sorting" time="0.001">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_AFTER) should not save not-comment posts" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_AFTER) should not save not-comment posts" time="0">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_AFTER) should not save duplicate posts" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_AFTER) should not save duplicate posts" time="0">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_AFTER) should do nothing when receiving no posts" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_AFTER) should do nothing when receiving no posts" time="0.001">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_AFTER) should do nothing when receiving no comments" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_AFTER) should do nothing when receiving no comments" time="0">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_BEFORE) should save comments without in the correct threads without sorting" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_BEFORE) should save comments without in the correct threads without sorting" time="0.001">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_BEFORE) should not save not-comment posts" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_BEFORE) should not save not-comment posts" time="0">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_BEFORE) should not save duplicate posts" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_BEFORE) should not save duplicate posts" time="0.001">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_BEFORE) should do nothing when receiving no posts" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_BEFORE) should do nothing when receiving no posts" time="0">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_BEFORE) should do nothing when receiving no comments" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_BEFORE) should do nothing when receiving no comments" time="0.001">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_IN_CHANNEL) should save comments without in the correct threads without sorting" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_IN_CHANNEL) should save comments without in the correct threads without sorting" time="0">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_IN_CHANNEL) should not save not-comment posts" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_IN_CHANNEL) should not save not-comment posts" time="0.001">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_IN_CHANNEL) should not save duplicate posts" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_IN_CHANNEL) should not save duplicate posts" time="0">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_IN_CHANNEL) should do nothing when receiving no posts" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_IN_CHANNEL) should do nothing when receiving no posts" time="0.002">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_IN_CHANNEL) should do nothing when receiving no comments" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_IN_CHANNEL) should do nothing when receiving no comments" time="0">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_SINCE) should save comments without in the correct threads without sorting" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_SINCE) should save comments without in the correct threads without sorting" time="0.001">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_SINCE) should not save not-comment posts" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_SINCE) should not save not-comment posts" time="0">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_SINCE) should not save duplicate posts" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_SINCE) should not save duplicate posts" time="0.001">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_SINCE) should do nothing when receiving no posts" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_SINCE) should do nothing when receiving no posts" time="0.001">
    </testcase>
    <testcase classname="postsInThread receiving posts in the channel (RECEIVED_POSTS_SINCE) should do nothing when receiving no comments" name="postsInThread receiving posts in the channel (RECEIVED_POSTS_SINCE) should do nothing when receiving no comments" time="0">
    </testcase>
    <testcase classname="postsInThread receiving posts in a thread should save comments without sorting" name="postsInThread receiving posts in a thread should save comments without sorting" time="0.001">
    </testcase>
    <testcase classname="postsInThread receiving posts in a thread should not save the root post" name="postsInThread receiving posts in a thread should not save the root post" time="0">
    </testcase>
    <testcase classname="postsInThread receiving posts in a thread should not save duplicate posts" name="postsInThread receiving posts in a thread should not save duplicate posts" time="0.001">
    </testcase>
    <testcase classname="postsInThread receiving posts in a thread should do nothing when receiving no posts" name="postsInThread receiving posts in a thread should do nothing when receiving no posts" time="0">
    </testcase>
    <testcase classname="postsInThread deleting a post should remove the thread when deleting the root post" name="postsInThread deleting a post should remove the thread when deleting the root post" time="0.001">
    </testcase>
    <testcase classname="postsInThread deleting a post should do nothing when deleting a comment" name="postsInThread deleting a post should do nothing when deleting a comment" time="0.001">
    </testcase>
    <testcase classname="postsInThread deleting a post should do nothing if deleting a post without comments" name="postsInThread deleting a post should do nothing if deleting a post without comments" time="0">
    </testcase>
    <testcase classname="postsInThread removing a post should remove the thread when removing the root post" name="postsInThread removing a post should remove the thread when removing the root post" time="0.001">
    </testcase>
    <testcase classname="postsInThread removing a post should remove an entry from the thread when removing a comment" name="postsInThread removing a post should remove an entry from the thread when removing a comment" time="0.001">
    </testcase>
    <testcase classname="postsInThread removing a post should do nothing if removing a thread that has not been loaded" name="postsInThread removing a post should do nothing if removing a thread that has not been loaded" time="0.001">
    </testcase>
    <testcase classname="postsInThread when a channel is deleted (RECEIVED_CHANNEL_DELETED) should remove any threads in that channel" name="postsInThread when a channel is deleted (RECEIVED_CHANNEL_DELETED) should remove any threads in that channel" time="0">
    </testcase>
    <testcase classname="postsInThread when a channel is deleted (RECEIVED_CHANNEL_DELETED) should do nothing if no threads in that channel are loaded" name="postsInThread when a channel is deleted (RECEIVED_CHANNEL_DELETED) should do nothing if no threads in that channel are loaded" time="0.001">
    </testcase>
    <testcase classname="postsInThread when a channel is deleted (RECEIVED_CHANNEL_DELETED) should not remove any posts with viewArchivedChannels enabled" name="postsInThread when a channel is deleted (RECEIVED_CHANNEL_DELETED) should not remove any posts with viewArchivedChannels enabled" time="0">
    </testcase>
    <testcase classname="postsInThread when a channel is deleted (DELETE_CHANNEL_SUCCESS) should remove any threads in that channel" name="postsInThread when a channel is deleted (DELETE_CHANNEL_SUCCESS) should remove any threads in that channel" time="0">
    </testcase>
    <testcase classname="postsInThread when a channel is deleted (DELETE_CHANNEL_SUCCESS) should do nothing if no threads in that channel are loaded" name="postsInThread when a channel is deleted (DELETE_CHANNEL_SUCCESS) should do nothing if no threads in that channel are loaded" time="0.001">
    </testcase>
    <testcase classname="postsInThread when a channel is deleted (DELETE_CHANNEL_SUCCESS) should not remove any posts with viewArchivedChannels enabled" name="postsInThread when a channel is deleted (DELETE_CHANNEL_SUCCESS) should not remove any posts with viewArchivedChannels enabled" time="0">
    </testcase>
    <testcase classname="postsInThread when a channel is deleted (LEAVE_CHANNEL) should remove any threads in that channel" name="postsInThread when a channel is deleted (LEAVE_CHANNEL) should remove any threads in that channel" time="0.001">
    </testcase>
    <testcase classname="postsInThread when a channel is deleted (LEAVE_CHANNEL) should do nothing if no threads in that channel are loaded" name="postsInThread when a channel is deleted (LEAVE_CHANNEL) should do nothing if no threads in that channel are loaded" time="0">
    </testcase>
    <testcase classname="postsInThread when a channel is deleted (LEAVE_CHANNEL) should not remove any posts with viewArchivedChannels enabled" name="postsInThread when a channel is deleted (LEAVE_CHANNEL) should not remove any posts with viewArchivedChannels enabled" time="0.001">
    </testcase>
    <testcase classname="removeUnneededMetadata without metadata" name="removeUnneededMetadata without metadata" time="0">
    </testcase>
    <testcase classname="removeUnneededMetadata with empty metadata" name="removeUnneededMetadata with empty metadata" time="0.001">
    </testcase>
    <testcase classname="removeUnneededMetadata should remove emojis" name="removeUnneededMetadata should remove emojis" time="0">
    </testcase>
    <testcase classname="removeUnneededMetadata should remove files" name="removeUnneededMetadata should remove files" time="0.001">
    </testcase>
    <testcase classname="removeUnneededMetadata should remove reactions" name="removeUnneededMetadata should remove reactions" time="0">
    </testcase>
    <testcase classname="removeUnneededMetadata should remove OpenGraph data" name="removeUnneededMetadata should remove OpenGraph data" time="0.001">
    </testcase>
    <testcase classname="removeUnneededMetadata should not affect non-OpenGraph embeds" name="removeUnneededMetadata should not affect non-OpenGraph embeds" time="0">
    </testcase>
    <testcase classname="reactions single post received (RECEIVED_NEW_POST) no post metadata" name="reactions single post received (RECEIVED_NEW_POST) no post metadata" time="0.001">
    </testcase>
    <testcase classname="reactions single post received (RECEIVED_NEW_POST) no reactions in post metadata" name="reactions single post received (RECEIVED_NEW_POST) no reactions in post metadata" time="0">
    </testcase>
    <testcase classname="reactions single post received (RECEIVED_NEW_POST) should not clobber reactions when metadata empty" name="reactions single post received (RECEIVED_NEW_POST) should not clobber reactions when metadata empty" time="0">
    </testcase>
    <testcase classname="reactions single post received (RECEIVED_NEW_POST) should save reactions" name="reactions single post received (RECEIVED_NEW_POST) should save reactions" time="0.001">
    </testcase>
    <testcase classname="reactions single post received (RECEIVED_POST) no post metadata" name="reactions single post received (RECEIVED_POST) no post metadata" time="0">
    </testcase>
    <testcase classname="reactions single post received (RECEIVED_POST) no reactions in post metadata" name="reactions single post received (RECEIVED_POST) no reactions in post metadata" time="0.001">
    </testcase>
    <testcase classname="reactions single post received (RECEIVED_POST) should not clobber reactions when metadata empty" name="reactions single post received (RECEIVED_POST) should not clobber reactions when metadata empty" time="0">
    </testcase>
    <testcase classname="reactions single post received (RECEIVED_POST) should save reactions" name="reactions single post received (RECEIVED_POST) should save reactions" time="0">
    </testcase>
    <testcase classname="reactions receiving multiple posts no post metadata" name="reactions receiving multiple posts no post metadata" time="0.001">
    </testcase>
    <testcase classname="reactions receiving multiple posts no reactions in post metadata" name="reactions receiving multiple posts no reactions in post metadata" time="0">
    </testcase>
    <testcase classname="reactions receiving multiple posts should save reactions" name="reactions receiving multiple posts should save reactions" time="0.001">
    </testcase>
    <testcase classname="reactions receiving multiple posts should save reactions for multiple posts" name="reactions receiving multiple posts should save reactions for multiple posts" time="0">
    </testcase>
    <testcase classname="opengraph single post received (RECEIVED_NEW_POST) no post metadata" name="opengraph single post received (RECEIVED_NEW_POST) no post metadata" time="0.001">
    </testcase>
    <testcase classname="opengraph single post received (RECEIVED_NEW_POST) no embeds in post metadata" name="opengraph single post received (RECEIVED_NEW_POST) no embeds in post metadata" time="0.001">
    </testcase>
    <testcase classname="opengraph single post received (RECEIVED_NEW_POST) other types of embeds in post metadata" name="opengraph single post received (RECEIVED_NEW_POST) other types of embeds in post metadata" time="0.001">
    </testcase>
    <testcase classname="opengraph single post received (RECEIVED_NEW_POST) should save opengraph data" name="opengraph single post received (RECEIVED_NEW_POST) should save opengraph data" time="0">
    </testcase>
    <testcase classname="opengraph single post received (RECEIVED_POST) no post metadata" name="opengraph single post received (RECEIVED_POST) no post metadata" time="0">
    </testcase>
    <testcase classname="opengraph single post received (RECEIVED_POST) no embeds in post metadata" name="opengraph single post received (RECEIVED_POST) no embeds in post metadata" time="0.001">
    </testcase>
    <testcase classname="opengraph single post received (RECEIVED_POST) other types of embeds in post metadata" name="opengraph single post received (RECEIVED_POST) other types of embeds in post metadata" time="0">
    </testcase>
    <testcase classname="opengraph single post received (RECEIVED_POST) should save opengraph data" name="opengraph single post received (RECEIVED_POST) should save opengraph data" time="0.001">
    </testcase>
    <testcase classname="opengraph receiving multiple posts no post metadata" name="opengraph receiving multiple posts no post metadata" time="0">
    </testcase>
    <testcase classname="opengraph receiving multiple posts no embeds in post metadata" name="opengraph receiving multiple posts no embeds in post metadata" time="0">
    </testcase>
    <testcase classname="opengraph receiving multiple posts other types of embeds in post metadata" name="opengraph receiving multiple posts other types of embeds in post metadata" time="0.001">
    </testcase>
    <testcase classname="opengraph receiving multiple posts should save opengraph data" name="opengraph receiving multiple posts should save opengraph data" time="0">
    </testcase>
    <testcase classname="opengraph receiving multiple posts should save reactions for multiple posts" name="opengraph receiving multiple posts should save reactions for multiple posts" time="0">
    </testcase>
    <testcase classname="expandedURLs should store the URLs on REDIRECT_LOCATION_SUCCESS" name="expandedURLs should store the URLs on REDIRECT_LOCATION_SUCCESS" time="0.001">
    </testcase>
    <testcase classname="expandedURLs should store the non-expanded URL on REDIRECT_LOCATION_FAILURE" name="expandedURLs should store the non-expanded URL on REDIRECT_LOCATION_FAILURE" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Channels" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:25" time="7.359" tests="55">
    <testcase classname="Actions.Channels selectChannel" name="Actions.Channels selectChannel" time="0.135">
    </testcase>
    <testcase classname="Actions.Channels createChannel" name="Actions.Channels createChannel" time="0.051">
    </testcase>
    <testcase classname="Actions.Channels createDirectChannel" name="Actions.Channels createDirectChannel" time="0.017">
    </testcase>
    <testcase classname="Actions.Channels createGroupChannel" name="Actions.Channels createGroupChannel" time="0.03">
    </testcase>
    <testcase classname="Actions.Channels updateChannel" name="Actions.Channels updateChannel" time="0.004">
    </testcase>
    <testcase classname="Actions.Channels patchChannel" name="Actions.Channels patchChannel" time="0.006">
    </testcase>
    <testcase classname="Actions.Channels convertChannelToPrivate" name="Actions.Channels convertChannelToPrivate" time="0.006">
    </testcase>
    <testcase classname="Actions.Channels getChannel" name="Actions.Channels getChannel" time="0.004">
    </testcase>
    <testcase classname="Actions.Channels getChannelByNameAndTeamName" name="Actions.Channels getChannelByNameAndTeamName" time="0.005">
    </testcase>
    <testcase classname="Actions.Channels getChannelAndMyMember" name="Actions.Channels getChannelAndMyMember" time="0.009">
    </testcase>
    <testcase classname="Actions.Channels fetchMyChannelsAndMembers" name="Actions.Channels fetchMyChannelsAndMembers" time="0.015">
    </testcase>
    <testcase classname="Actions.Channels updateChannelNotifyProps" name="Actions.Channels updateChannelNotifyProps" time="0.009">
    </testcase>
    <testcase classname="Actions.Channels deleteChannel" name="Actions.Channels deleteChannel" time="0.026">
    </testcase>
    <testcase classname="Actions.Channels viewChannel" name="Actions.Channels viewChannel" time="0.013">
    </testcase>
    <testcase classname="Actions.Channels markChannelAsViewed" name="Actions.Channels markChannelAsViewed" time="0.059">
    </testcase>
    <testcase classname="Actions.Channels markChannelAsUnread plain message" name="Actions.Channels markChannelAsUnread plain message" time="0.007">
    </testcase>
    <testcase classname="Actions.Channels markChannelAsUnread message mentioning current user" name="Actions.Channels markChannelAsUnread message mentioning current user" time="0.008">
    </testcase>
    <testcase classname="Actions.Channels markChannelAsUnread plain message with mark_unread=&quot;mention&quot;" name="Actions.Channels markChannelAsUnread plain message with mark_unread=&quot;mention&quot;" time="0.009">
    </testcase>
    <testcase classname="Actions.Channels markChannelAsUnread message mentioning current user with mark_unread=&quot;mention&quot;" name="Actions.Channels markChannelAsUnread message mentioning current user with mark_unread=&quot;mention&quot;" time="0.006">
    </testcase>
    <testcase classname="Actions.Channels markChannelAsRead one read channel" name="Actions.Channels markChannelAsRead one read channel" time="0.009">
    </testcase>
    <testcase classname="Actions.Channels markChannelAsRead one unread channel" name="Actions.Channels markChannelAsRead one unread channel" time="0.009">
    </testcase>
    <testcase classname="Actions.Channels markChannelAsRead one unread DM channel" name="Actions.Channels markChannelAsRead one unread DM channel" time="0.007">
    </testcase>
    <testcase classname="Actions.Channels markChannelAsRead two unread channels, same team, reading one" name="Actions.Channels markChannelAsRead two unread channels, same team, reading one" time="0.007">
    </testcase>
    <testcase classname="Actions.Channels markChannelAsRead two unread channels, same team, reading both" name="Actions.Channels markChannelAsRead two unread channels, same team, reading both" time="0.007">
    </testcase>
    <testcase classname="Actions.Channels markChannelAsRead two unread channels, same team, reading both (opposite order)" name="Actions.Channels markChannelAsRead two unread channels, same team, reading both (opposite order)" time="0.007">
    </testcase>
    <testcase classname="Actions.Channels markChannelAsRead two unread channels, different teams, reading one" name="Actions.Channels markChannelAsRead two unread channels, different teams, reading one" time="0.006">
    </testcase>
    <testcase classname="Actions.Channels markChannelAsRead two unread channels, different teams, reading both" name="Actions.Channels markChannelAsRead two unread channels, different teams, reading both" time="0.006">
    </testcase>
    <testcase classname="Actions.Channels markChannelAsRead two unread channels, different teams, reading both (opposite order)" name="Actions.Channels markChannelAsRead two unread channels, different teams, reading both (opposite order)" time="0.008">
    </testcase>
    <testcase classname="Actions.Channels getChannels" name="Actions.Channels getChannels" time="0.011">
    </testcase>
    <testcase classname="Actions.Channels getAllChannels" name="Actions.Channels getAllChannels" time="0.01">
    </testcase>
    <testcase classname="Actions.Channels getAllChannelsWithCount" name="Actions.Channels getAllChannelsWithCount" time="0.014">
    </testcase>
    <testcase classname="Actions.Channels searchAllChannels" name="Actions.Channels searchAllChannels" time="0.012">
    </testcase>
    <testcase classname="Actions.Channels getChannelMembers" name="Actions.Channels getChannelMembers" time="0.007">
    </testcase>
    <testcase classname="Actions.Channels getChannelMember" name="Actions.Channels getChannelMember" time="0.004">
    </testcase>
    <testcase classname="Actions.Channels getMyChannelMember" name="Actions.Channels getMyChannelMember" time="0.004">
    </testcase>
    <testcase classname="Actions.Channels getChannelMembersByIds" name="Actions.Channels getChannelMembersByIds" time="0.005">
    </testcase>
    <testcase classname="Actions.Channels getChannelStats" name="Actions.Channels getChannelStats" time="0.005">
    </testcase>
    <testcase classname="Actions.Channels addChannelMember" name="Actions.Channels addChannelMember" time="0.011">
    </testcase>
    <testcase classname="Actions.Channels removeChannelMember" name="Actions.Channels removeChannelMember" time="0.013">
    </testcase>
    <testcase classname="Actions.Channels updateChannelMemberRoles" name="Actions.Channels updateChannelMemberRoles" time="0.011">
    </testcase>
    <testcase classname="Actions.Channels updateChannelHeader" name="Actions.Channels updateChannelHeader" time="0.005">
    </testcase>
    <testcase classname="Actions.Channels updateChannelPurpose" name="Actions.Channels updateChannelPurpose" time="0.005">
    </testcase>
    <testcase classname="Actions.Channels leaveChannel" name="Actions.Channels leaveChannel" time="0.318">
    </testcase>
    <testcase classname="Actions.Channels leave private channel" name="Actions.Channels leave private channel" time="0.029">
    </testcase>
    <testcase classname="Actions.Channels joinChannel" name="Actions.Channels joinChannel" time="0.011">
    </testcase>
    <testcase classname="Actions.Channels joinChannelByName" name="Actions.Channels joinChannelByName" time="0.012">
    </testcase>
    <testcase classname="Actions.Channels favoriteChannel" name="Actions.Channels favoriteChannel" time="0.003">
    </testcase>
    <testcase classname="Actions.Channels unfavoriteChannel" name="Actions.Channels unfavoriteChannel" time="0.003">
    </testcase>
    <testcase classname="Actions.Channels autocompleteChannels" name="Actions.Channels autocompleteChannels" time="0.006">
    </testcase>
    <testcase classname="Actions.Channels autocompleteChannelsForSearch" name="Actions.Channels autocompleteChannelsForSearch" time="0.005">
    </testcase>
    <testcase classname="Actions.Channels updateChannelScheme" name="Actions.Channels updateChannelScheme" time="0.02">
    </testcase>
    <testcase classname="Actions.Channels updateChannelMemberSchemeRoles" name="Actions.Channels updateChannelMemberSchemeRoles" time="0.023">
    </testcase>
    <testcase classname="Actions.Channels markGroupChannelOpen" name="Actions.Channels markGroupChannelOpen" time="0.004">
    </testcase>
    <testcase classname="Actions.Channels getChannelTimezones" name="Actions.Channels getChannelTimezones" time="0.005">
    </testcase>
    <testcase classname="Actions.Channels membersMinusGroupMembers" name="Actions.Channels membersMinusGroupMembers" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Selectors.Posts" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:32" time="0.344" tests="52">
    <testcase classname="Selectors.Posts should return the most recent post for each channel" name="Selectors.Posts should return the most recent post for each channel" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts should return single post with no children" name="Selectors.Posts should return single post with no children" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts should return post with children" name="Selectors.Posts should return post with children" time="0">
    </testcase>
    <testcase classname="Selectors.Posts should return memoized result for identical props" name="Selectors.Posts should return memoized result for identical props" time="0">
    </testcase>
    <testcase classname="Selectors.Posts should return memoized result for multiple selectors with different props" name="Selectors.Posts should return memoized result for multiple selectors with different props" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts should return reactions for post" name="Selectors.Posts should return reactions for post" time="0">
    </testcase>
    <testcase classname="Selectors.Posts should return profiles for reactions" name="Selectors.Posts should return profiles for reactions" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts get posts in channel" name="Selectors.Posts get posts in channel" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts get posts around post in channel" name="Selectors.Posts get posts around post in channel" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts get posts in channel with notify comments as any" name="Selectors.Posts get posts in channel with notify comments as any" time="0">
    </testcase>
    <testcase classname="Selectors.Posts get posts in channel with notify comments as root" name="Selectors.Posts get posts in channel with notify comments as root" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts get posts in channel with notify comments as never" name="Selectors.Posts get posts in channel with notify comments as never" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts gets posts around post in channel not adding ephemeral post to replyCount" name="Selectors.Posts gets posts around post in channel not adding ephemeral post to replyCount" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts gets posts in channel not adding ephemeral post to replyCount" name="Selectors.Posts gets posts in channel not adding ephemeral post to replyCount" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts get current history item" name="Selectors.Posts get current history item" time="0">
    </testcase>
    <testcase classname="Selectors.Posts getPostIdsForThread single post" name="Selectors.Posts getPostIdsForThread single post" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts getPostIdsForThread thread" name="Selectors.Posts getPostIdsForThread thread" time="0.003">
    </testcase>
    <testcase classname="Selectors.Posts getPostIdsForThread memoization" name="Selectors.Posts getPostIdsForThread memoization" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts getPostIdsForThread memoization with multiple selectors" name="Selectors.Posts getPostIdsForThread memoization with multiple selectors" time="0">
    </testcase>
    <testcase classname="Selectors.Posts getPostIdsAroundPost no posts around" name="Selectors.Posts getPostIdsAroundPost no posts around" time="0">
    </testcase>
    <testcase classname="Selectors.Posts getPostIdsAroundPost posts around" name="Selectors.Posts getPostIdsAroundPost posts around" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts getPostIdsAroundPost posts before limit" name="Selectors.Posts getPostIdsAroundPost posts before limit" time="0">
    </testcase>
    <testcase classname="Selectors.Posts getPostIdsAroundPost posts after limit" name="Selectors.Posts getPostIdsAroundPost posts after limit" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts getPostIdsAroundPost posts before/after limit" name="Selectors.Posts getPostIdsAroundPost posts before/after limit" time="0">
    </testcase>
    <testcase classname="Selectors.Posts getPostIdsAroundPost memoization" name="Selectors.Posts getPostIdsAroundPost memoization" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts getPostIdsAroundPost memoization with multiple selectors" name="Selectors.Posts getPostIdsAroundPost memoization with multiple selectors" time="0">
    </testcase>
    <testcase classname="Selectors.Posts getPostsForIds selector" name="Selectors.Posts getPostsForIds selector" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts getPostsForIds memoization" name="Selectors.Posts getPostsForIds memoization" time="0">
    </testcase>
    <testcase classname="Selectors.Posts getMostRecentPostIdInChannel system messages visible" name="Selectors.Posts getMostRecentPostIdInChannel system messages visible" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts getMostRecentPostIdInChannel system messages hidden" name="Selectors.Posts getMostRecentPostIdInChannel system messages hidden" time="0">
    </testcase>
    <testcase classname="Selectors.Posts getLatestReplyablePostId no posts" name="Selectors.Posts getLatestReplyablePostId no posts" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts getLatestReplyablePostId return first post which dosent have POST_DELETED state" name="Selectors.Posts getLatestReplyablePostId return first post which dosent have POST_DELETED state" time="0">
    </testcase>
    <testcase classname="Selectors.Posts makeIsPostCommentMention Should return true as root post is by the current user" name="Selectors.Posts makeIsPostCommentMention Should return true as root post is by the current user" time="0">
    </testcase>
    <testcase classname="Selectors.Posts makeIsPostCommentMention Should return false as post is not from currentUser" name="Selectors.Posts makeIsPostCommentMention Should return false as post is not from currentUser" time="0">
    </testcase>
    <testcase classname="Selectors.Posts makeIsPostCommentMention Should return true as post is from webhook but user created rootPost" name="Selectors.Posts makeIsPostCommentMention Should return true as post is from webhook but user created rootPost" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts makeIsPostCommentMention Should return true as user commented in the thread" name="Selectors.Posts makeIsPostCommentMention Should return true as user commented in the thread" time="0">
    </testcase>
    <testcase classname="Selectors.Posts makeIsPostCommentMention Should return false as user commented in the thread but notify_props is for root only" name="Selectors.Posts makeIsPostCommentMention Should return false as user commented in the thread but notify_props is for root only" time="0.001">
    </testcase>
    <testcase classname="Selectors.Posts makeIsPostCommentMention Should return false as user created root post" name="Selectors.Posts makeIsPostCommentMention Should return false as user created root post" time="0">
    </testcase>
    <testcase classname="getPostIdsInCurrentChannel should return null when channel is not loaded" name="getPostIdsInCurrentChannel should return null when channel is not loaded" time="0.001">
    </testcase>
    <testcase classname="getPostIdsInCurrentChannel should return null when recent posts are not loaded" name="getPostIdsInCurrentChannel should return null when recent posts are not loaded" time="0">
    </testcase>
    <testcase classname="getPostIdsInCurrentChannel should return post order from recent block" name="getPostIdsInCurrentChannel should return post order from recent block" time="0.001">
    </testcase>
    <testcase classname="getPostsInCurrentChannel should return null when channel is not loaded" name="getPostsInCurrentChannel should return null when channel is not loaded" time="0">
    </testcase>
    <testcase classname="getPostsInCurrentChannel should return null when recent posts are not loaded" name="getPostsInCurrentChannel should return null when recent posts are not loaded" time="0.001">
    </testcase>
    <testcase classname="getPostsInCurrentChannel should return post order from recent block" name="getPostsInCurrentChannel should return post order from recent block" time="0">
    </testcase>
    <testcase classname="getCurrentUsersLatestPost no posts" name="getCurrentUsersLatestPost no posts" time="0">
    </testcase>
    <testcase classname="getCurrentUsersLatestPost return first post which user can edit" name="getCurrentUsersLatestPost return first post which user can edit" time="0.001">
    </testcase>
    <testcase classname="getCurrentUsersLatestPost return first post which user can edit ignore pending and failed" name="getCurrentUsersLatestPost return first post which user can edit ignore pending and failed" time="0">
    </testcase>
    <testcase classname="getCurrentUsersLatestPost return first post which has rootId match" name="getCurrentUsersLatestPost return first post which has rootId match" time="0.001">
    </testcase>
    <testcase classname="getCurrentUsersLatestPost should not return posts outside of the recent block" name="getCurrentUsersLatestPost should not return posts outside of the recent block" time="0">
    </testcase>
    <testcase classname="getCurrentUsersLatestPost determine the sending posts" name="getCurrentUsersLatestPost determine the sending posts" time="0.001">
    </testcase>
    <testcase classname="getExpandedLink should get the expanded link from the state" name="getExpandedLink should get the expanded link from the state" time="0.001">
    </testcase>
    <testcase classname="getExpandedLink should return undefined if it is not saved" name="getExpandedLink should return undefined if it is not saved" time="0">
    </testcase>
  </testsuite>
  <testsuite name="makeFilterPostsAndAddSeparators" errors="0" failures="0" skipped="46" timestamp="2019-06-30T09:59:32" time="0.401" tests="50">
    <testcase classname="makeFilterPostsAndAddSeparators filter join/leave posts" name="makeFilterPostsAndAddSeparators filter join/leave posts" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeFilterPostsAndAddSeparators new messages indicator" name="makeFilterPostsAndAddSeparators new messages indicator" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeFilterPostsAndAddSeparators memoization" name="makeFilterPostsAndAddSeparators memoization" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeCombineUserActivityPosts should do nothing if no post IDs are provided" name="makeCombineUserActivityPosts should do nothing if no post IDs are provided" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeCombineUserActivityPosts should do nothing if there are no user activity posts" name="makeCombineUserActivityPosts should do nothing if there are no user activity posts" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeCombineUserActivityPosts should combine adjacent user activity posts" name="makeCombineUserActivityPosts should combine adjacent user activity posts" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeCombineUserActivityPosts should &quot;combine&quot; a single activity post" name="makeCombineUserActivityPosts should &quot;combine&quot; a single activity post" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeCombineUserActivityPosts should not combine with regular messages" name="makeCombineUserActivityPosts should not combine with regular messages" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeCombineUserActivityPosts should not combine with other system messages" name="makeCombineUserActivityPosts should not combine with other system messages" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeCombineUserActivityPosts should not combine across non-post items" name="makeCombineUserActivityPosts should not combine across non-post items" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeCombineUserActivityPosts should not combine more than 100 posts" name="makeCombineUserActivityPosts should not combine more than 100 posts" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeCombineUserActivityPosts memoization should not recalculate when nothing has changed" name="makeCombineUserActivityPosts memoization should not recalculate when nothing has changed" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeCombineUserActivityPosts memoization should recalculate when the post IDs change" name="makeCombineUserActivityPosts memoization should recalculate when the post IDs change" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeCombineUserActivityPosts memoization should not recalculate when an unrelated state change occurs" name="makeCombineUserActivityPosts memoization should not recalculate when an unrelated state change occurs" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeCombineUserActivityPosts memoization should recalculate if any post changes, but should return the same results if possible" name="makeCombineUserActivityPosts memoization should recalculate if any post changes, but should return the same results if possible" time="0">
      <skipped/>
    </testcase>
    <testcase classname="isDateLine should correctly identify date line items" name="isDateLine should correctly identify date line items" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getDateForDateLine should get date correctly without suffix" name="getDateForDateLine should get date correctly without suffix" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getDateForDateLine should get date correctly with suffix" name="getDateForDateLine should get date correctly with suffix" time="0">
      <skipped/>
    </testcase>
    <testcase classname="isCombinedUserActivityPost should correctly identify combined user activity posts" name="isCombinedUserActivityPost should correctly identify combined user activity posts" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getPostIdsForCombinedUserActivityPost should get IDs correctly" name="getPostIdsForCombinedUserActivityPost should get IDs correctly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getFirstPostId should return the first item if it is a post" name="getFirstPostId should return the first item if it is a post" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getFirstPostId should return the first ID from a combined post" name="getFirstPostId should return the first ID from a combined post" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getFirstPostId should skip date separators" name="getFirstPostId should skip date separators" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getFirstPostId should skip the new message line" name="getFirstPostId should skip the new message line" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getLastPostId should return the last item if it is a post" name="getLastPostId should return the last item if it is a post" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getLastPostId should return the last ID from a combined post" name="getLastPostId should return the last ID from a combined post" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getLastPostId should skip date separators" name="getLastPostId should skip date separators" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getLastPostId should skip the new message line" name="getLastPostId should skip the new message line" time="0">
      <skipped/>
    </testcase>
    <testcase classname="getLastPostIndex should return index of last post for list of all regular posts" name="getLastPostIndex should return index of last post for list of all regular posts" time="0.001">
    </testcase>
    <testcase classname="getLastPostIndex should return index of last combined post" name="getLastPostIndex should return index of last combined post" time="0.001">
    </testcase>
    <testcase classname="getLastPostIndex should skip date separators and return index of last post" name="getLastPostIndex should skip date separators and return index of last post" time="0">
    </testcase>
    <testcase classname="getLastPostIndex should skip the new message line and return index of last post" name="getLastPostIndex should skip the new message line and return index of last post" time="0.001">
    </testcase>
    <testcase classname="makeGenerateCombinedPost should output a combined post" name="makeGenerateCombinedPost should output a combined post" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeGenerateCombinedPost memoization should not recalculate when called twice with the same ID" name="makeGenerateCombinedPost memoization should not recalculate when called twice with the same ID" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeGenerateCombinedPost memoization should recalculate when called twice with different IDs" name="makeGenerateCombinedPost memoization should recalculate when called twice with different IDs" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeGenerateCombinedPost memoization should not recalculate when a different post changes" name="makeGenerateCombinedPost memoization should not recalculate when a different post changes" time="0">
      <skipped/>
    </testcase>
    <testcase classname="makeGenerateCombinedPost memoization should recalculate when one of the included posts change" name="makeGenerateCombinedPost memoization should recalculate when one of the included posts change" time="0">
      <skipped/>
    </testcase>
    <testcase classname="combineUserActivitySystemPost should return null" name="combineUserActivitySystemPost should return null" time="0">
      <skipped/>
    </testcase>
    <testcase classname="combineUserActivitySystemPost should match return for ADD_TO_CHANNEL" name="combineUserActivitySystemPost should match return for ADD_TO_CHANNEL" time="0">
      <skipped/>
    </testcase>
    <testcase classname="combineUserActivitySystemPost should match return for ADD_TO_CHANNEL, backward compatibility with addedUsername" name="combineUserActivitySystemPost should match return for ADD_TO_CHANNEL, backward compatibility with addedUsername" time="0">
      <skipped/>
    </testcase>
    <testcase classname="combineUserActivitySystemPost should match return for ADD_TO_TEAM" name="combineUserActivitySystemPost should match return for ADD_TO_TEAM" time="0">
      <skipped/>
    </testcase>
    <testcase classname="combineUserActivitySystemPost should match return for ADD_TO_TEAM, backward compatibility with addedUsername" name="combineUserActivitySystemPost should match return for ADD_TO_TEAM, backward compatibility with addedUsername" time="0">
      <skipped/>
    </testcase>
    <testcase classname="combineUserActivitySystemPost should match return for JOIN_CHANNEL" name="combineUserActivitySystemPost should match return for JOIN_CHANNEL" time="0">
      <skipped/>
    </testcase>
    <testcase classname="combineUserActivitySystemPost should match return for JOIN_TEAM" name="combineUserActivitySystemPost should match return for JOIN_TEAM" time="0">
      <skipped/>
    </testcase>
    <testcase classname="combineUserActivitySystemPost should match return for LEAVE_CHANNEL" name="combineUserActivitySystemPost should match return for LEAVE_CHANNEL" time="0">
      <skipped/>
    </testcase>
    <testcase classname="combineUserActivitySystemPost should match return for LEAVE_TEAM" name="combineUserActivitySystemPost should match return for LEAVE_TEAM" time="0">
      <skipped/>
    </testcase>
    <testcase classname="combineUserActivitySystemPost should match return for REMOVE_FROM_CHANNEL" name="combineUserActivitySystemPost should match return for REMOVE_FROM_CHANNEL" time="0">
      <skipped/>
    </testcase>
    <testcase classname="combineUserActivitySystemPost should match return for REMOVE_FROM_TEAM" name="combineUserActivitySystemPost should match return for REMOVE_FROM_TEAM" time="0">
      <skipped/>
    </testcase>
    <testcase classname="combineUserActivitySystemPost should match return on combination" name="combineUserActivitySystemPost should match return on combination" time="0">
      <skipped/>
    </testcase>
    <testcase classname="comparePostTypes should sort post type correctly" name="comparePostTypes should sort post type correctly" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Selectors.Channels" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:33" time="0.371" tests="56">
    <testcase classname="Selectors.Channels should return channels in current team" name="Selectors.Channels should return channels in current team" time="0.003">
    </testcase>
    <testcase classname="Selectors.Channels get my channels in current team and DMs" name="Selectors.Channels get my channels in current team and DMs" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels should return members in current channel" name="Selectors.Channels should return members in current channel" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get public channels not member of" name="Selectors.Channels get public channels not member of" time="0">
    </testcase>
    <testcase classname="Selectors.Channels get public, unarchived channels not member of" name="Selectors.Channels get public, unarchived channels not member of" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get archived channels that user is member of" name="Selectors.Channels get archived channels that user is member of" time="0">
    </testcase>
    <testcase classname="Selectors.Channels get channel" name="Selectors.Channels get channel" time="0">
    </testcase>
    <testcase classname="Selectors.Channels get first channel that matches by name" name="Selectors.Channels get first channel that matches by name" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get unreads for current team" name="Selectors.Channels get unreads for current team" time="0">
    </testcase>
    <testcase classname="Selectors.Channels get unreads" name="Selectors.Channels get unreads" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get unreads with a missing profile entity" name="Selectors.Channels get unreads with a missing profile entity" time="0">
    </testcase>
    <testcase classname="Selectors.Channels get unreads with a deactivated user" name="Selectors.Channels get unreads with a deactivated user" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get unreads with a deactivated channel" name="Selectors.Channels get unreads with a deactivated channel" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get channel map for current team" name="Selectors.Channels get channel map for current team" time="0">
    </testcase>
    <testcase classname="Selectors.Channels get channel map for team" name="Selectors.Channels get channel map for team" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get channels by category" name="Selectors.Channels get channels by category" time="0.002">
    </testcase>
    <testcase classname="Selectors.Channels get channels by category including unreads" name="Selectors.Channels get channels by category including unreads" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get group channels" name="Selectors.Channels get group channels" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get direct channel ids strict equal" name="Selectors.Channels get direct channel ids strict equal" time="0">
    </testcase>
    <testcase classname="Selectors.Channels get channel ids in current team strict equal" name="Selectors.Channels get channel ids in current team strict equal" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get channel ids for current team strict equal" name="Selectors.Channels get channel ids for current team strict equal" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get unread channel ids in current team strict equal" name="Selectors.Channels get unread channel ids in current team strict equal" time="0">
    </testcase>
    <testcase classname="Selectors.Channels get unread channel ids in current team and keep specified channel as unread" name="Selectors.Channels get unread channel ids in current team and keep specified channel as unread" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get sorted unread channel ids in current team strict equal" name="Selectors.Channels get sorted unread channel ids in current team strict equal" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get sorted favorite channel ids in current team strict equal" name="Selectors.Channels get sorted favorite channel ids in current team strict equal" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get sorted public channel ids in current team strict equal" name="Selectors.Channels get sorted public channel ids in current team strict equal" time="0.002">
    </testcase>
    <testcase classname="Selectors.Channels get sorted private channel ids in current team strict equal" name="Selectors.Channels get sorted private channel ids in current team strict equal" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels filters post IDs by the given condition" name="Selectors.Channels filters post IDs by the given condition" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels isCurrentChannelFavorite" name="Selectors.Channels isCurrentChannelFavorite" time="0">
    </testcase>
    <testcase classname="Selectors.Channels isCurrentChannelMuted" name="Selectors.Channels isCurrentChannelMuted" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels isCurrentChannelArchived" name="Selectors.Channels isCurrentChannelArchived" time="0">
    </testcase>
    <testcase classname="Selectors.Channels isCurrentChannelDefault" name="Selectors.Channels isCurrentChannelDefault" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels getDirectAndGroupChannels will return no channels if there is no active user" name="Selectors.Channels getDirectAndGroupChannels will return no channels if there is no active user" time="0">
    </testcase>
    <testcase classname="Selectors.Channels getDirectAndGroupChannels will return only direct and group message channels" name="Selectors.Channels getDirectAndGroupChannels will return only direct and group message channels" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels getDirectAndGroupChannels will not error out on undefined channels" name="Selectors.Channels getDirectAndGroupChannels will not error out on undefined channels" time="0">
    </testcase>
    <testcase classname="Selectors.Channels getDirectAndGroupChannels Should not include deleted users in favorites" name="Selectors.Channels getDirectAndGroupChannels Should not include deleted users in favorites" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels getDirectAndGroupChannels get ordered channel ids by_type in current team strict equal" name="Selectors.Channels getDirectAndGroupChannels get ordered channel ids by_type in current team strict equal" time="0.003">
    </testcase>
    <testcase classname="Selectors.Channels getDirectAndGroupChannels get ordered channel ids by recency order in current team strict equal" name="Selectors.Channels getDirectAndGroupChannels get ordered channel ids by recency order in current team strict equal" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels more_direct_channels selector getChannelsWithUserProfiles" name="Selectors.Channels more_direct_channels selector getChannelsWithUserProfiles" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get_redirect_channel_name_for_team selector getRedirectChannelNameForTeam without advanced permissions" name="Selectors.Channels get_redirect_channel_name_for_team selector getRedirectChannelNameForTeam without advanced permissions" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get_redirect_channel_name_for_team selector getRedirectChannelNameForTeam with advanced permissions but without JOIN_PUBLIC_CHANNELS permission" name="Selectors.Channels get_redirect_channel_name_for_team selector getRedirectChannelNameForTeam with advanced permissions but without JOIN_PUBLIC_CHANNELS permission" time="0.003">
    </testcase>
    <testcase classname="Selectors.Channels get_redirect_channel_name_for_team selector getRedirectChannelNameForTeam with advanced permissions and with JOIN_PUBLIC_CHANNELS permission" name="Selectors.Channels get_redirect_channel_name_for_team selector getRedirectChannelNameForTeam with advanced permissions and with JOIN_PUBLIC_CHANNELS permission" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get_redirect_channel_name_for_team selector getRedirectChannelNameForTeam with advanced permissions but without JOIN_PUBLIC_CHANNELS permission but being member of town-square" name="Selectors.Channels get_redirect_channel_name_for_team selector getRedirectChannelNameForTeam with advanced permissions but without JOIN_PUBLIC_CHANNELS permission but being member of town-square" time="0">
    </testcase>
    <testcase classname="Selectors.Channels get_redirect_channel_name_for_team selector getRedirectChannelNameForTeam without advanced permissions in not current team" name="Selectors.Channels get_redirect_channel_name_for_team selector getRedirectChannelNameForTeam without advanced permissions in not current team" time="0">
    </testcase>
    <testcase classname="Selectors.Channels get_redirect_channel_name_for_team selector getRedirectChannelNameForTeam with advanced permissions but without JOIN_PUBLIC_CHANNELS permission in not current team" name="Selectors.Channels get_redirect_channel_name_for_team selector getRedirectChannelNameForTeam with advanced permissions but without JOIN_PUBLIC_CHANNELS permission in not current team" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get_redirect_channel_name_for_team selector getRedirectChannelNameForTeam with advanced permissions and with JOIN_PUBLIC_CHANNELS permission in not current team" name="Selectors.Channels get_redirect_channel_name_for_team selector getRedirectChannelNameForTeam with advanced permissions and with JOIN_PUBLIC_CHANNELS permission in not current team" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels get_redirect_channel_name_for_team selector getRedirectChannelNameForTeam with advanced permissions but without JOIN_PUBLIC_CHANNELS permission but being member of town-square in not current team" name="Selectors.Channels get_redirect_channel_name_for_team selector getRedirectChannelNameForTeam with advanced permissions but without JOIN_PUBLIC_CHANNELS permission but being member of town-square in not current team" time="0">
    </testcase>
    <testcase classname="Selectors.Channels canManageAnyChannelMembersInCurrentTeam will return false if channel_user does not have permissions to manage channel members" name="Selectors.Channels canManageAnyChannelMembersInCurrentTeam will return false if channel_user does not have permissions to manage channel members" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels canManageAnyChannelMembersInCurrentTeam will return true if channel_user has permissions to manage public channel members" name="Selectors.Channels canManageAnyChannelMembersInCurrentTeam will return true if channel_user has permissions to manage public channel members" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels canManageAnyChannelMembersInCurrentTeam will return true if channel_user has permissions to manage private channel members" name="Selectors.Channels canManageAnyChannelMembersInCurrentTeam will return true if channel_user has permissions to manage private channel members" time="0">
    </testcase>
    <testcase classname="Selectors.Channels canManageAnyChannelMembersInCurrentTeam will return false if channel admins have permissions, but the user is not a channel admin of any channel" name="Selectors.Channels canManageAnyChannelMembersInCurrentTeam will return false if channel admins have permissions, but the user is not a channel admin of any channel" time="0.001">
    </testcase>
    <testcase classname="Selectors.Channels canManageAnyChannelMembersInCurrentTeam will return true if channel admins have permission, and the user is a channel admin of some channel" name="Selectors.Channels canManageAnyChannelMembersInCurrentTeam will return true if channel admins have permission, and the user is a channel admin of some channel" time="0">
    </testcase>
    <testcase classname="Selectors.Channels canManageAnyChannelMembersInCurrentTeam will return true if team admins have permission, and the user is a team admin" name="Selectors.Channels canManageAnyChannelMembersInCurrentTeam will return true if team admins have permission, and the user is a team admin" time="0.001">
    </testcase>
    <testcase classname="getMyFirstChannelForTeams should return the first channel in each team" name="getMyFirstChannelForTeams should return the first channel in each team" time="0.001">
    </testcase>
    <testcase classname="getMyFirstChannelForTeams should only return channels that the current user is a member of" name="getMyFirstChannelForTeams should only return channels that the current user is a member of" time="0">
    </testcase>
    <testcase classname="getMyFirstChannelForTeams should only return teams that the current user is a member of" name="getMyFirstChannelForTeams should only return teams that the current user is a member of" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Posts" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:33" time="1.237" tests="51">
    <testcase classname="Actions.Posts createPost" name="Actions.Posts createPost" time="0.008">
    </testcase>
    <testcase classname="Actions.Posts resetCreatePostRequest" name="Actions.Posts resetCreatePostRequest" time="0.107">
    </testcase>
    <testcase classname="Actions.Posts createPost with file attachments" name="Actions.Posts createPost with file attachments" time="0.005">
    </testcase>
    <testcase classname="Actions.Posts editPost" name="Actions.Posts editPost" time="0.012">
    </testcase>
    <testcase classname="Actions.Posts deletePost" name="Actions.Posts deletePost" time="0.005">
    </testcase>
    <testcase classname="Actions.Posts deletePostWithReaction" name="Actions.Posts deletePostWithReaction" time="0.023">
    </testcase>
    <testcase classname="Actions.Posts removePost" name="Actions.Posts removePost" time="0.006">
    </testcase>
    <testcase classname="Actions.Posts removePostWithReaction" name="Actions.Posts removePostWithReaction" time="0.019">
    </testcase>
    <testcase classname="Actions.Posts getPostThread" name="Actions.Posts getPostThread" time="0.006">
    </testcase>
    <testcase classname="Actions.Posts getPosts" name="Actions.Posts getPosts" time="0.007">
    </testcase>
    <testcase classname="Actions.Posts getNeededAtMentionedUsernames" name="Actions.Posts getNeededAtMentionedUsernames" time="0.002">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis no emojis in post" name="Actions.Posts getNeededCustomEmojis no emojis in post" time="0.002">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis already loaded custom emoji in post" name="Actions.Posts getNeededCustomEmojis already loaded custom emoji in post" time="0.003">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis system emoji in post" name="Actions.Posts getNeededCustomEmojis system emoji in post" time="0.003">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis mixed emojis in post" name="Actions.Posts getNeededCustomEmojis mixed emojis in post" time="0.003">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis custom emojis and text in post" name="Actions.Posts getNeededCustomEmojis custom emojis and text in post" time="0.003">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis custom emoji followed by punctuation" name="Actions.Posts getNeededCustomEmojis custom emoji followed by punctuation" time="0.001">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis custom emoji including hyphen" name="Actions.Posts getNeededCustomEmojis custom emoji including hyphen" time="0.003">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis custom emoji including underscore" name="Actions.Posts getNeededCustomEmojis custom emoji including underscore" time="0.003">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis custom emoji in message attachment text" name="Actions.Posts getNeededCustomEmojis custom emoji in message attachment text" time="0.004">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis custom emoji in message attachment pretext" name="Actions.Posts getNeededCustomEmojis custom emoji in message attachment pretext" time="0.002">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis custom emoji in message attachment field" name="Actions.Posts getNeededCustomEmojis custom emoji in message attachment field" time="0.002">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis mixed emojis in message attachment" name="Actions.Posts getNeededCustomEmojis mixed emojis in message attachment" time="0.003">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis empty message attachment field" name="Actions.Posts getNeededCustomEmojis empty message attachment field" time="0.003">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis null message attachment contents" name="Actions.Posts getNeededCustomEmojis null message attachment contents" time="0.003">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis null message attachment" name="Actions.Posts getNeededCustomEmojis null message attachment" time="0.003">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis multiple posts" name="Actions.Posts getNeededCustomEmojis multiple posts" time="0.002">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis with custom emojis disabled" name="Actions.Posts getNeededCustomEmojis with custom emojis disabled" time="0.003">
    </testcase>
    <testcase classname="Actions.Posts getNeededCustomEmojis do not load emojis when the post has metadata" name="Actions.Posts getNeededCustomEmojis do not load emojis when the post has metadata" time="0.003">
    </testcase>
    <testcase classname="Actions.Posts getPostsSince" name="Actions.Posts getPostsSince" time="0.008">
    </testcase>
    <testcase classname="Actions.Posts getPostsBefore" name="Actions.Posts getPostsBefore" time="0.009">
    </testcase>
    <testcase classname="Actions.Posts getPostsAfter" name="Actions.Posts getPostsAfter" time="0.009">
    </testcase>
    <testcase classname="Actions.Posts getPostsAround" name="Actions.Posts getPostsAround" time="0.011">
    </testcase>
    <testcase classname="Actions.Posts flagPost" name="Actions.Posts flagPost" time="0.018">
    </testcase>
    <testcase classname="Actions.Posts unflagPost" name="Actions.Posts unflagPost" time="0.018">
    </testcase>
    <testcase classname="Actions.Posts pinPost" name="Actions.Posts pinPost" time="0.012">
    </testcase>
    <testcase classname="Actions.Posts unpinPost" name="Actions.Posts unpinPost" time="0.015">
    </testcase>
    <testcase classname="Actions.Posts addReaction" name="Actions.Posts addReaction" time="0.019">
    </testcase>
    <testcase classname="Actions.Posts removeReaction" name="Actions.Posts removeReaction" time="0.019">
    </testcase>
    <testcase classname="Actions.Posts getReactionsForPost" name="Actions.Posts getReactionsForPost" time="0.021">
    </testcase>
    <testcase classname="Actions.Posts getCustomEmojiForReaction" name="Actions.Posts getCustomEmojiForReaction" time="0.01">
    </testcase>
    <testcase classname="Actions.Posts getOpenGraphMetadata" name="Actions.Posts getOpenGraphMetadata" time="0.047">
    </testcase>
    <testcase classname="Actions.Posts doPostAction" name="Actions.Posts doPostAction" time="0.004">
    </testcase>
    <testcase classname="Actions.Posts doPostActionWithCookie" name="Actions.Posts doPostActionWithCookie" time="0.005">
    </testcase>
    <testcase classname="Actions.Posts addMessageIntoHistory" name="Actions.Posts addMessageIntoHistory" time="0.005">
    </testcase>
    <testcase classname="Actions.Posts resetHistoryIndex" name="Actions.Posts resetHistoryIndex" time="0.005">
    </testcase>
    <testcase classname="Actions.Posts moveHistoryIndexBack" name="Actions.Posts moveHistoryIndexBack" time="0.006">
    </testcase>
    <testcase classname="Actions.Posts moveHistoryIndexForward" name="Actions.Posts moveHistoryIndexForward" time="0.005">
    </testcase>
    <testcase classname="Actions.Posts getProfilesAndStatusesForPosts different values for posts argument null" name="Actions.Posts getProfilesAndStatusesForPosts different values for posts argument null" time="0.003">
    </testcase>
    <testcase classname="Actions.Posts getProfilesAndStatusesForPosts different values for posts argument array of posts" name="Actions.Posts getProfilesAndStatusesForPosts different values for posts argument array of posts" time="0.003">
    </testcase>
    <testcase classname="Actions.Posts getProfilesAndStatusesForPosts different values for posts argument object map of posts" name="Actions.Posts getProfilesAndStatusesForPosts different values for posts argument object map of posts" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Users" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:34" time="1.223" tests="57">
    <testcase classname="Actions.Users createUser" name="Actions.Users createUser" time="0.007">
    </testcase>
    <testcase classname="Actions.Users login" name="Actions.Users login" time="0.018">
    </testcase>
    <testcase classname="Actions.Users loginById" name="Actions.Users loginById" time="0.014">
    </testcase>
    <testcase classname="Actions.Users getTermsOfService" name="Actions.Users getTermsOfService" time="0.005">
    </testcase>
    <testcase classname="Actions.Users updateMyTermsOfServiceStatus accept terms" name="Actions.Users updateMyTermsOfServiceStatus accept terms" time="0.016">
    </testcase>
    <testcase classname="Actions.Users updateMyTermsOfServiceStatus reject terms" name="Actions.Users updateMyTermsOfServiceStatus reject terms" time="0.015">
    </testcase>
    <testcase classname="Actions.Users logout" name="Actions.Users logout" time="0.007">
    </testcase>
    <testcase classname="Actions.Users getProfiles" name="Actions.Users getProfiles" time="0.005">
    </testcase>
    <testcase classname="Actions.Users getProfilesByIds" name="Actions.Users getProfilesByIds" time="0.007">
    </testcase>
    <testcase classname="Actions.Users getMissingProfilesByIds" name="Actions.Users getMissingProfilesByIds" time="0.006">
    </testcase>
    <testcase classname="Actions.Users getProfilesByUsernames" name="Actions.Users getProfilesByUsernames" time="0.006">
    </testcase>
    <testcase classname="Actions.Users getProfilesInTeam" name="Actions.Users getProfilesInTeam" time="0.006">
    </testcase>
    <testcase classname="Actions.Users getProfilesNotInTeam" name="Actions.Users getProfilesNotInTeam" time="0.006">
    </testcase>
    <testcase classname="Actions.Users getProfilesWithoutTeam" name="Actions.Users getProfilesWithoutTeam" time="0.007">
    </testcase>
    <testcase classname="Actions.Users getProfilesInChannel" name="Actions.Users getProfilesInChannel" time="0.005">
    </testcase>
    <testcase classname="Actions.Users getProfilesNotInChannel" name="Actions.Users getProfilesNotInChannel" time="0.006">
    </testcase>
    <testcase classname="Actions.Users getUser" name="Actions.Users getUser" time="0.006">
    </testcase>
    <testcase classname="Actions.Users getMe" name="Actions.Users getMe" time="0.005">
    </testcase>
    <testcase classname="Actions.Users getUserByUsername" name="Actions.Users getUserByUsername" time="0.007">
    </testcase>
    <testcase classname="Actions.Users getUserByEmail" name="Actions.Users getUserByEmail" time="0.008">
    </testcase>
    <testcase classname="Actions.Users searchProfiles" name="Actions.Users searchProfiles" time="0.004">
    </testcase>
    <testcase classname="Actions.Users getStatusesByIds" name="Actions.Users getStatusesByIds" time="0.005">
    </testcase>
    <testcase classname="Actions.Users getTotalUsersStats" name="Actions.Users getTotalUsersStats" time="0.004">
    </testcase>
    <testcase classname="Actions.Users getStatus" name="Actions.Users getStatus" time="0.005">
    </testcase>
    <testcase classname="Actions.Users setStatus" name="Actions.Users setStatus" time="0.003">
    </testcase>
    <testcase classname="Actions.Users getSessions" name="Actions.Users getSessions" time="0.006">
    </testcase>
    <testcase classname="Actions.Users revokeSession" name="Actions.Users revokeSession" time="0.01">
    </testcase>
    <testcase classname="Actions.Users revokeSession and logout" name="Actions.Users revokeSession and logout" time="0.01">
    </testcase>
    <testcase classname="Actions.Users revokeAllSessionsForCurrentUser" name="Actions.Users revokeAllSessionsForCurrentUser" time="0.059">
    </testcase>
    <testcase classname="Actions.Users getUserAudits" name="Actions.Users getUserAudits" time="0.006">
    </testcase>
    <testcase classname="Actions.Users autocompleteUsers" name="Actions.Users autocompleteUsers" time="0.007">
    </testcase>
    <testcase classname="Actions.Users updateMe" name="Actions.Users updateMe" time="0.016">
    </testcase>
    <testcase classname="Actions.Users patchUser" name="Actions.Users patchUser" time="0.018">
    </testcase>
    <testcase classname="Actions.Users updateUserRoles" name="Actions.Users updateUserRoles" time="0.016">
    </testcase>
    <testcase classname="Actions.Users updateUserMfa" name="Actions.Users updateUserMfa" time="0.015">
    </testcase>
    <testcase classname="Actions.Users updateUserPassword" name="Actions.Users updateUserPassword" time="0.015">
    </testcase>
    <testcase classname="Actions.Users checkMfa" name="Actions.Users checkMfa" time="0.005">
    </testcase>
    <testcase classname="Actions.Users generateMfaSecret" name="Actions.Users generateMfaSecret" time="0.004">
    </testcase>
    <testcase classname="Actions.Users updateUserActive" name="Actions.Users updateUserActive" time="0.007">
    </testcase>
    <testcase classname="Actions.Users verifyUserEmail" name="Actions.Users verifyUserEmail" time="0.004">
    </testcase>
    <testcase classname="Actions.Users sendVerificationEmail" name="Actions.Users sendVerificationEmail" time="0.005">
    </testcase>
    <testcase classname="Actions.Users resetUserPassword" name="Actions.Users resetUserPassword" time="0.004">
    </testcase>
    <testcase classname="Actions.Users sendPasswordResetEmail" name="Actions.Users sendPasswordResetEmail" time="0.004">
    </testcase>
    <testcase classname="Actions.Users uploadProfileImage" name="Actions.Users uploadProfileImage" time="0.019">
    </testcase>
    <testcase classname="Actions.Users setDefaultProfileImage" name="Actions.Users setDefaultProfileImage" time="0.016">
    </testcase>
    <testcase classname="Actions.Users switchEmailToOAuth" name="Actions.Users switchEmailToOAuth" time="0.005">
    </testcase>
    <testcase classname="Actions.Users switchOAuthToEmail" name="Actions.Users switchOAuthToEmail" time="0.005">
    </testcase>
    <testcase classname="Actions.Users switchEmailToLdap" name="Actions.Users switchEmailToLdap" time="0.006">
    </testcase>
    <testcase classname="Actions.Users switchLdapToEmail" name="Actions.Users switchLdapToEmail" time="0.004">
    </testcase>
    <testcase classname="Actions.Users createUserAccessToken" name="Actions.Users createUserAccessToken" time="0.015">
    </testcase>
    <testcase classname="Actions.Users getUserAccessToken" name="Actions.Users getUserAccessToken" time="0.017">
    </testcase>
    <testcase classname="Actions.Users getUserAccessTokens" name="Actions.Users getUserAccessTokens" time="0.017">
    </testcase>
    <testcase classname="Actions.Users getUserAccessTokensForUser" name="Actions.Users getUserAccessTokensForUser" time="0.017">
    </testcase>
    <testcase classname="Actions.Users revokeUserAccessToken" name="Actions.Users revokeUserAccessToken" time="0.018">
    </testcase>
    <testcase classname="Actions.Users disableUserAccessToken" name="Actions.Users disableUserAccessToken" time="0.017">
    </testcase>
    <testcase classname="Actions.Users enableUserAccessToken" name="Actions.Users enableUserAccessToken" time="0.017">
    </testcase>
    <testcase classname="Actions.Users clearUserAccessTokens" name="Actions.Users clearUserAccessTokens" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Admin" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:36" time="0.807" tests="46">
    <testcase classname="Actions.Admin getLogs" name="Actions.Admin getLogs" time="0.008">
    </testcase>
    <testcase classname="Actions.Admin getAudits" name="Actions.Admin getAudits" time="0.009">
    </testcase>
    <testcase classname="Actions.Admin getConfig" name="Actions.Admin getConfig" time="0.006">
    </testcase>
    <testcase classname="Actions.Admin updateConfig" name="Actions.Admin updateConfig" time="0.01">
    </testcase>
    <testcase classname="Actions.Admin reloadConfig" name="Actions.Admin reloadConfig" time="0.005">
    </testcase>
    <testcase classname="Actions.Admin getEnvironmentConfig" name="Actions.Admin getEnvironmentConfig" time="0.005">
    </testcase>
    <testcase classname="Actions.Admin testEmail" name="Actions.Admin testEmail" time="0.007">
    </testcase>
    <testcase classname="Actions.Admin testS3Connection" name="Actions.Admin testS3Connection" time="0.007">
    </testcase>
    <testcase classname="Actions.Admin invalidateCaches" name="Actions.Admin invalidateCaches" time="0.005">
    </testcase>
    <testcase classname="Actions.Admin recycleDatabase" name="Actions.Admin recycleDatabase" time="0.005">
    </testcase>
    <testcase classname="Actions.Admin createComplianceReport" name="Actions.Admin createComplianceReport" time="0.005">
    </testcase>
    <testcase classname="Actions.Admin getComplianceReport" name="Actions.Admin getComplianceReport" time="0.007">
    </testcase>
    <testcase classname="Actions.Admin getComplianceReports" name="Actions.Admin getComplianceReports" time="0.008">
    </testcase>
    <testcase classname="Actions.Admin uploadBrandImage" name="Actions.Admin uploadBrandImage" time="0.006">
    </testcase>
    <testcase classname="Actions.Admin deleteBrandImage" name="Actions.Admin deleteBrandImage" time="0.005">
    </testcase>
    <testcase classname="Actions.Admin getClusterStatus" name="Actions.Admin getClusterStatus" time="0.008">
    </testcase>
    <testcase classname="Actions.Admin testLdap" name="Actions.Admin testLdap" time="0.004">
    </testcase>
    <testcase classname="Actions.Admin syncLdap" name="Actions.Admin syncLdap" time="0.006">
    </testcase>
    <testcase classname="Actions.Admin getSamlCertificateStatus" name="Actions.Admin getSamlCertificateStatus" time="0.005">
    </testcase>
    <testcase classname="Actions.Admin uploadPublicSamlCertificate" name="Actions.Admin uploadPublicSamlCertificate" time="0.006">
    </testcase>
    <testcase classname="Actions.Admin uploadPrivateSamlCertificate" name="Actions.Admin uploadPrivateSamlCertificate" time="0.005">
    </testcase>
    <testcase classname="Actions.Admin uploadIdpSamlCertificate" name="Actions.Admin uploadIdpSamlCertificate" time="0.006">
    </testcase>
    <testcase classname="Actions.Admin removePublicSamlCertificate" name="Actions.Admin removePublicSamlCertificate" time="0.006">
    </testcase>
    <testcase classname="Actions.Admin removePrivateSamlCertificate" name="Actions.Admin removePrivateSamlCertificate" time="0.004">
    </testcase>
    <testcase classname="Actions.Admin removeIdpSamlCertificate" name="Actions.Admin removeIdpSamlCertificate" time="0.005">
    </testcase>
    <testcase classname="Actions.Admin testElasticsearch" name="Actions.Admin testElasticsearch" time="0.006">
    </testcase>
    <testcase classname="Actions.Admin purgeElasticsearchIndexes" name="Actions.Admin purgeElasticsearchIndexes" time="0.006">
    </testcase>
    <testcase classname="Actions.Admin uploadLicense" name="Actions.Admin uploadLicense" time="0.005">
    </testcase>
    <testcase classname="Actions.Admin removeLicense" name="Actions.Admin removeLicense" time="0.005">
    </testcase>
    <testcase classname="Actions.Admin getStandardAnalytics" name="Actions.Admin getStandardAnalytics" time="0.008">
    </testcase>
    <testcase classname="Actions.Admin getAdvancedAnalytics" name="Actions.Admin getAdvancedAnalytics" time="0.007">
    </testcase>
    <testcase classname="Actions.Admin getPostsPerDayAnalytics" name="Actions.Admin getPostsPerDayAnalytics" time="0.009">
    </testcase>
    <testcase classname="Actions.Admin getUsersPerDayAnalytics" name="Actions.Admin getUsersPerDayAnalytics" time="0.008">
    </testcase>
    <testcase classname="Actions.Admin overwritePlugin" name="Actions.Admin overwritePlugin" time="0.01">
    </testcase>
    <testcase classname="Actions.Admin uploadPlugin" name="Actions.Admin uploadPlugin" time="0.006">
    </testcase>
    <testcase classname="Actions.Admin getPlugins" name="Actions.Admin getPlugins" time="0.005">
    </testcase>
    <testcase classname="Actions.Admin getPluginStatuses" name="Actions.Admin getPluginStatuses" time="0.005">
    </testcase>
    <testcase classname="Actions.Admin removePlugin" name="Actions.Admin removePlugin" time="0.008">
    </testcase>
    <testcase classname="Actions.Admin enablePlugin" name="Actions.Admin enablePlugin" time="0.007">
    </testcase>
    <testcase classname="Actions.Admin disablePlugin" name="Actions.Admin disablePlugin" time="0.008">
    </testcase>
    <testcase classname="Actions.Admin getLdapGroups" name="Actions.Admin getLdapGroups" time="0.005">
    </testcase>
    <testcase classname="Actions.Admin getLdapGroups is_linked" name="Actions.Admin getLdapGroups is_linked" time="0.009">
    </testcase>
    <testcase classname="Actions.Admin getLdapGroups is_configured" name="Actions.Admin getLdapGroups is_configured" time="0.007">
    </testcase>
    <testcase classname="Actions.Admin getLdapGroups with name query" name="Actions.Admin getLdapGroups with name query" time="0.007">
    </testcase>
    <testcase classname="Actions.Admin linkLdapGroup" name="Actions.Admin linkLdapGroup" time="0.006">
    </testcase>
    <testcase classname="Actions.Admin unlinkLdapGroup" name="Actions.Admin unlinkLdapGroup" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="reducers.entities.admin" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:36" time="0.127" tests="17">
    <testcase classname="reducers.entities.admin pluginStatuses initial state" name="reducers.entities.admin pluginStatuses initial state" time="0.001">
    </testcase>
    <testcase classname="reducers.entities.admin pluginStatuses RECEIVED_PLUGIN_STATUSES, empty initial state" name="reducers.entities.admin pluginStatuses RECEIVED_PLUGIN_STATUSES, empty initial state" time="0.001">
    </testcase>
    <testcase classname="reducers.entities.admin pluginStatuses RECEIVED_PLUGIN_STATUSES, previously populated state" name="reducers.entities.admin pluginStatuses RECEIVED_PLUGIN_STATUSES, previously populated state" time="0">
    </testcase>
    <testcase classname="reducers.entities.admin pluginStatuses ENABLE_PLUGIN_REQUEST, plugin_0" name="reducers.entities.admin pluginStatuses ENABLE_PLUGIN_REQUEST, plugin_0" time="0">
    </testcase>
    <testcase classname="reducers.entities.admin pluginStatuses DISABLE_PLUGIN_REQUEST, plugin_0" name="reducers.entities.admin pluginStatuses DISABLE_PLUGIN_REQUEST, plugin_0" time="0.001">
    </testcase>
    <testcase classname="reducers.entities.admin pluginStatuses DISABLE_PLUGIN_REQUEST, plugin_1" name="reducers.entities.admin pluginStatuses DISABLE_PLUGIN_REQUEST, plugin_1" time="0">
    </testcase>
    <testcase classname="reducers.entities.admin pluginStatuses REMOVED_PLUGIN, plugin_0" name="reducers.entities.admin pluginStatuses REMOVED_PLUGIN, plugin_0" time="0.001">
    </testcase>
    <testcase classname="reducers.entities.admin pluginStatuses REMOVED_PLUGIN, plugin_1" name="reducers.entities.admin pluginStatuses REMOVED_PLUGIN, plugin_1" time="0">
    </testcase>
    <testcase classname="reducers.entities.admin pluginStatuses LOGOUT_SUCCESS, previously populated state" name="reducers.entities.admin pluginStatuses LOGOUT_SUCCESS, previously populated state" time="0.001">
    </testcase>
    <testcase classname="reducers.entities.admin convertAnalyticsRowsToStats data should not be mutated" name="reducers.entities.admin convertAnalyticsRowsToStats data should not be mutated" time="0">
    </testcase>
    <testcase classname="reducers.entities.admin ldapGroups initial state" name="reducers.entities.admin ldapGroups initial state" time="0">
    </testcase>
    <testcase classname="reducers.entities.admin ldapGroups RECEIVED_LDAP_GROUPS, empty initial state" name="reducers.entities.admin ldapGroups RECEIVED_LDAP_GROUPS, empty initial state" time="0.001">
    </testcase>
    <testcase classname="reducers.entities.admin ldapGroups RECEIVED_LDAP_GROUPS, previously populated" name="reducers.entities.admin ldapGroups RECEIVED_LDAP_GROUPS, previously populated" time="0">
    </testcase>
    <testcase classname="reducers.entities.admin ldapGroups LINKED_LDAP_GROUP" name="reducers.entities.admin ldapGroups LINKED_LDAP_GROUP" time="0.001">
    </testcase>
    <testcase classname="reducers.entities.admin ldapGroups UNLINKED_LDAP_GROUP" name="reducers.entities.admin ldapGroups UNLINKED_LDAP_GROUP" time="0">
    </testcase>
    <testcase classname="reducers.entities.admin ldapGroups LINK_LDAP_GROUP_FAILURE" name="reducers.entities.admin ldapGroups LINK_LDAP_GROUP_FAILURE" time="0">
    </testcase>
    <testcase classname="reducers.entities.admin ldapGroups LINK_LDAP_GROUP_FAILURE" name="reducers.entities.admin ldapGroups LINK_LDAP_GROUP_FAILURE" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Integrations" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:36" time="0.664" tests="27">
    <testcase classname="Actions.Integrations createIncomingHook" name="Actions.Integrations createIncomingHook" time="0.008">
    </testcase>
    <testcase classname="Actions.Integrations getIncomingWebhook" name="Actions.Integrations getIncomingWebhook" time="0.009">
    </testcase>
    <testcase classname="Actions.Integrations getIncomingWebhooks" name="Actions.Integrations getIncomingWebhooks" time="0.008">
    </testcase>
    <testcase classname="Actions.Integrations removeIncomingHook" name="Actions.Integrations removeIncomingHook" time="0.008">
    </testcase>
    <testcase classname="Actions.Integrations updateIncomingHook" name="Actions.Integrations updateIncomingHook" time="0.01">
    </testcase>
    <testcase classname="Actions.Integrations createOutgoingHook" name="Actions.Integrations createOutgoingHook" time="0.005">
    </testcase>
    <testcase classname="Actions.Integrations getOutgoingWebhook" name="Actions.Integrations getOutgoingWebhook" time="0.007">
    </testcase>
    <testcase classname="Actions.Integrations getOutgoingWebhooks" name="Actions.Integrations getOutgoingWebhooks" time="0.006">
    </testcase>
    <testcase classname="Actions.Integrations removeOutgoingHook" name="Actions.Integrations removeOutgoingHook" time="0.007">
    </testcase>
    <testcase classname="Actions.Integrations updateOutgoingHook" name="Actions.Integrations updateOutgoingHook" time="0.008">
    </testcase>
    <testcase classname="Actions.Integrations regenOutgoingHookToken" name="Actions.Integrations regenOutgoingHookToken" time="0.007">
    </testcase>
    <testcase classname="Actions.Integrations getCommands" name="Actions.Integrations getCommands" time="0.013">
    </testcase>
    <testcase classname="Actions.Integrations getAutocompleteCommands" name="Actions.Integrations getAutocompleteCommands" time="0.01">
    </testcase>
    <testcase classname="Actions.Integrations getCustomTeamCommands" name="Actions.Integrations getCustomTeamCommands" time="0.013">
    </testcase>
    <testcase classname="Actions.Integrations executeCommand" name="Actions.Integrations executeCommand" time="0.006">
    </testcase>
    <testcase classname="Actions.Integrations addCommand" name="Actions.Integrations addCommand" time="0.008">
    </testcase>
    <testcase classname="Actions.Integrations regenCommandToken" name="Actions.Integrations regenCommandToken" time="0.01">
    </testcase>
    <testcase classname="Actions.Integrations editCommand" name="Actions.Integrations editCommand" time="0.01">
    </testcase>
    <testcase classname="Actions.Integrations deleteCommand" name="Actions.Integrations deleteCommand" time="0.008">
    </testcase>
    <testcase classname="Actions.Integrations addOAuthApp" name="Actions.Integrations addOAuthApp" time="0.006">
    </testcase>
    <testcase classname="Actions.Integrations getOAuthApp" name="Actions.Integrations getOAuthApp" time="0.007">
    </testcase>
    <testcase classname="Actions.Integrations editOAuthApp" name="Actions.Integrations editOAuthApp" time="0.006">
    </testcase>
    <testcase classname="Actions.Integrations getOAuthApps" name="Actions.Integrations getOAuthApps" time="0.009">
    </testcase>
    <testcase classname="Actions.Integrations getAuthorizedOAuthApps" name="Actions.Integrations getAuthorizedOAuthApps" time="0.007">
    </testcase>
    <testcase classname="Actions.Integrations deleteOAuthApp" name="Actions.Integrations deleteOAuthApp" time="0.006">
    </testcase>
    <testcase classname="Actions.Integrations regenOAuthAppSecret" name="Actions.Integrations regenOAuthAppSecret" time="0.008">
    </testcase>
    <testcase classname="Actions.Integrations submitInteractiveDialog" name="Actions.Integrations submitInteractiveDialog" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="PostUtils" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:37" time="0.198" tests="15">
    <testcase classname="PostUtils shouldFilterJoinLeavePost show join/leave posts" name="PostUtils shouldFilterJoinLeavePost show join/leave posts" time="0.001">
    </testcase>
    <testcase classname="PostUtils shouldFilterJoinLeavePost hide join/leave posts" name="PostUtils shouldFilterJoinLeavePost hide join/leave posts" time="0">
    </testcase>
    <testcase classname="PostUtils shouldFilterJoinLeavePost always join/leave posts for the current user" name="PostUtils shouldFilterJoinLeavePost always join/leave posts for the current user" time="0">
    </testcase>
    <testcase classname="PostUtils canEditPost should allow to edit my post without license" name="PostUtils canEditPost should allow to edit my post without license" time="0">
    </testcase>
    <testcase classname="PostUtils canEditPost should work with old permissions version" name="PostUtils canEditPost should work with old permissions version" time="0">
    </testcase>
    <testcase classname="PostUtils canEditPost should work with new permissions version" name="PostUtils canEditPost should work with new permissions version" time="0.002">
    </testcase>
    <testcase classname="PostUtils isSystemMessage should identify if post is system message" name="PostUtils isSystemMessage should identify if post is system message" time="0">
    </testcase>
    <testcase classname="PostUtils isUserActivityPost should identify if post is user activity - add/remove/join/leave channel/team" name="PostUtils isUserActivityPost should identify if post is user activity - add/remove/join/leave channel/team" time="0.001">
    </testcase>
    <testcase classname="PostUtils isPostCommentMention should return true as root post is by user" name="PostUtils isPostCommentMention should return true as root post is by user" time="0">
    </testcase>
    <testcase classname="PostUtils isPostCommentMention should return false as root post is not by user and did not participate in thread" name="PostUtils isPostCommentMention should return false as root post is not by user and did not participate in thread" time="0.003">
    </testcase>
    <testcase classname="PostUtils isPostCommentMention should return false post is by current User" name="PostUtils isPostCommentMention should return false post is by current User" time="0">
    </testcase>
    <testcase classname="PostUtils isPostCommentMention should return true as post is by current User but it is a webhhok and user participated in thread" name="PostUtils isPostCommentMention should return true as post is by current User but it is a webhhok and user participated in thread" time="0.001">
    </testcase>
    <testcase classname="PostUtils isPostCommentMention should return false as root post is not by currentUser and notify_props is root" name="PostUtils isPostCommentMention should return false as root post is not by currentUser and notify_props is root" time="0">
    </testcase>
    <testcase classname="PostUtils isPostCommentMention should return true as root post is by currentUser and notify_props is root" name="PostUtils isPostCommentMention should return true as root post is by currentUser and notify_props is root" time="0.001">
    </testcase>
    <testcase classname="PostUtils isMeMessage should correctly identify messages generated from /me" name="PostUtils isMeMessage should correctly identify messages generated from /me" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Websocket" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:37" time="6.853" tests="24">
    <testcase classname="Actions.Websocket WebSocket Connect" name="Actions.Websocket WebSocket Connect" time="0.001">
    </testcase>
    <testcase classname="Actions.Websocket Websocket Handle New Post" name="Actions.Websocket Websocket Handle New Post" time="0.005">
    </testcase>
    <testcase classname="Actions.Websocket Websocket Handle Post Edited" name="Actions.Websocket Websocket Handle Post Edited" time="0.302">
    </testcase>
    <testcase classname="Actions.Websocket Websocket Handle Post Deleted" name="Actions.Websocket Websocket Handle Post Deleted" time="0.001">
    </testcase>
    <testcase classname="Actions.Websocket Websocket Handle Reaction Added to Post" name="Actions.Websocket Websocket Handle Reaction Added to Post" time="0.503">
    </testcase>
    <testcase classname="Actions.Websocket Websocket Handle Reaction Removed from Post" name="Actions.Websocket Websocket Handle Reaction Removed from Post" time="0.503">
    </testcase>
    <testcase classname="Actions.Websocket Websocket handle team updated" name="Actions.Websocket Websocket handle team updated" time="0.506">
    </testcase>
    <testcase classname="Actions.Websocket Websocket handle team patched" name="Actions.Websocket Websocket handle team patched" time="0.506">
    </testcase>
    <testcase classname="Actions.Websocket WebSocket Leave Team" name="Actions.Websocket WebSocket Leave Team" time="0.007">
    </testcase>
    <testcase classname="Actions.Websocket Websocket Handle User Added" name="Actions.Websocket Websocket Handle User Added" time="0.003">
    </testcase>
    <testcase classname="Actions.Websocket Websocket Handle User Removed" name="Actions.Websocket Websocket Handle User Removed" time="0.003">
    </testcase>
    <testcase classname="Actions.Websocket Websocket Handle User Updated" name="Actions.Websocket Websocket Handle User Updated" time="0.002">
    </testcase>
    <testcase classname="Actions.Websocket Websocket Handle Channel Created" name="Actions.Websocket Websocket Handle Channel Created" time="1.002">
    </testcase>
    <testcase classname="Actions.Websocket Websocket Handle Channel Updated" name="Actions.Websocket Websocket Handle Channel Updated" time="0.303">
    </testcase>
    <testcase classname="Actions.Websocket Websocket Handle Channel Converted" name="Actions.Websocket Websocket Handle Channel Converted" time="0.307">
    </testcase>
    <testcase classname="Actions.Websocket Websocket Handle Channel Deleted" name="Actions.Websocket Websocket Handle Channel Deleted" time="0.522">
    </testcase>
    <testcase classname="Actions.Websocket Websocket Handle Direct Channel" name="Actions.Websocket Websocket Handle Direct Channel" time="0.512">
    </testcase>
    <testcase classname="Actions.Websocket Websocket handle user added to team" name="Actions.Websocket Websocket handle user added to team" time="0.512">
    </testcase>
    <testcase classname="Actions.Websocket Websocket handle emoji added" name="Actions.Websocket Websocket handle emoji added" time="0.206">
    </testcase>
    <testcase classname="Actions.Websocket handle license changed" name="Actions.Websocket handle license changed" time="0.206">
    </testcase>
    <testcase classname="Actions.Websocket handle config changed" name="Actions.Websocket handle config changed" time="0.206">
    </testcase>
    <testcase classname="Actions.Websocket handle open dialog" name="Actions.Websocket handle open dialog" time="0.206">
    </testcase>
    <testcase classname="Actions.Websocket doReconnect handle doReconnect" name="Actions.Websocket doReconnect handle doReconnect" time="0.004">
    </testcase>
    <testcase classname="Actions.Websocket doReconnect handle doReconnect after user left current team" name="Actions.Websocket doReconnect handle doReconnect after user left current team" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Groups" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:44" time="0.394" tests="11">
    <testcase classname="Actions.Groups getGroupSyncables" name="Actions.Groups getGroupSyncables" time="0.011">
    </testcase>
    <testcase classname="Actions.Groups getGroupMembers" name="Actions.Groups getGroupMembers" time="0.007">
    </testcase>
    <testcase classname="Actions.Groups getGroup" name="Actions.Groups getGroup" time="0.007">
    </testcase>
    <testcase classname="Actions.Groups linkGroupSyncable" name="Actions.Groups linkGroupSyncable" time="0.012">
    </testcase>
    <testcase classname="Actions.Groups unlinkGroupSyncable" name="Actions.Groups unlinkGroupSyncable" time="0.013">
    </testcase>
    <testcase classname="Actions.Groups getAllGroupsAssociatedToTeam" name="Actions.Groups getAllGroupsAssociatedToTeam" time="0.006">
    </testcase>
    <testcase classname="Actions.Groups getGroupsAssociatedToTeam" name="Actions.Groups getGroupsAssociatedToTeam" time="0.009">
    </testcase>
    <testcase classname="Actions.Groups getGroupsNotAssociatedToTeam" name="Actions.Groups getGroupsNotAssociatedToTeam" time="0.008">
    </testcase>
    <testcase classname="Actions.Groups getAllGroupsAssociatedToChannel" name="Actions.Groups getAllGroupsAssociatedToChannel" time="0.006">
    </testcase>
    <testcase classname="Actions.Groups getGroupsAssociatedToChannel" name="Actions.Groups getGroupsAssociatedToChannel" time="0.01">
    </testcase>
    <testcase classname="Actions.Groups getGroupsNotAssociatedToChannel" name="Actions.Groups getGroupsNotAssociatedToChannel" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Teams" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:45" time="0.712" tests="28">
    <testcase classname="Actions.Teams selectTeam" name="Actions.Teams selectTeam" time="0.106">
    </testcase>
    <testcase classname="Actions.Teams getMyTeams" name="Actions.Teams getMyTeams" time="0.051">
    </testcase>
    <testcase classname="Actions.Teams getTeamsForUser" name="Actions.Teams getTeamsForUser" time="0.006">
    </testcase>
    <testcase classname="Actions.Teams getTeams" name="Actions.Teams getTeams" time="0.007">
    </testcase>
    <testcase classname="Actions.Teams getTeams with total count" name="Actions.Teams getTeams with total count" time="0.006">
    </testcase>
    <testcase classname="Actions.Teams getTeam" name="Actions.Teams getTeam" time="0.006">
    </testcase>
    <testcase classname="Actions.Teams getTeamByName" name="Actions.Teams getTeamByName" time="0.007">
    </testcase>
    <testcase classname="Actions.Teams createTeam" name="Actions.Teams createTeam" time="0.007">
    </testcase>
    <testcase classname="Actions.Teams deleteTeam" name="Actions.Teams deleteTeam" time="0.023">
    </testcase>
    <testcase classname="Actions.Teams updateTeam" name="Actions.Teams updateTeam" time="0.006">
    </testcase>
    <testcase classname="Actions.Teams patchTeam" name="Actions.Teams patchTeam" time="0.009">
    </testcase>
    <testcase classname="Actions.Teams Join Open Team" name="Actions.Teams Join Open Team" time="0.018">
    </testcase>
    <testcase classname="Actions.Teams getMyTeamMembers and getMyTeamUnreads" name="Actions.Teams getMyTeamMembers and getMyTeamUnreads" time="0.007">
    </testcase>
    <testcase classname="Actions.Teams getTeamMembersForUser" name="Actions.Teams getTeamMembersForUser" time="0.005">
    </testcase>
    <testcase classname="Actions.Teams getTeamMember" name="Actions.Teams getTeamMember" time="0.007">
    </testcase>
    <testcase classname="Actions.Teams getTeamMembers" name="Actions.Teams getTeamMembers" time="0.012">
    </testcase>
    <testcase classname="Actions.Teams getTeamMembersByIds" name="Actions.Teams getTeamMembersByIds" time="0.01">
    </testcase>
    <testcase classname="Actions.Teams getTeamStats" name="Actions.Teams getTeamStats" time="0.006">
    </testcase>
    <testcase classname="Actions.Teams addUserToTeam" name="Actions.Teams addUserToTeam" time="0.007">
    </testcase>
    <testcase classname="Actions.Teams addUsersToTeam" name="Actions.Teams addUsersToTeam" time="0.008">
    </testcase>
    <testcase classname="Actions.Teams removeUserFromTeam" name="Actions.Teams removeUserFromTeam" time="0.008">
    </testcase>
    <testcase classname="Actions.Teams updateTeamMemberRoles" name="Actions.Teams updateTeamMemberRoles" time="0.008">
    </testcase>
    <testcase classname="Actions.Teams sendEmailInvitesToTeam" name="Actions.Teams sendEmailInvitesToTeam" time="0.005">
    </testcase>
    <testcase classname="Actions.Teams checkIfTeamExists" name="Actions.Teams checkIfTeamExists" time="0.006">
    </testcase>
    <testcase classname="Actions.Teams setTeamIcon" name="Actions.Teams setTeamIcon" time="0.018">
    </testcase>
    <testcase classname="Actions.Teams removeTeamIcon" name="Actions.Teams removeTeamIcon" time="0.013">
    </testcase>
    <testcase classname="Actions.Teams updateTeamScheme" name="Actions.Teams updateTeamScheme" time="0.016">
    </testcase>
    <testcase classname="Actions.Teams membersMinusGroupMembers" name="Actions.Teams membersMinusGroupMembers" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Selectors.Users" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:45" time="0.216" tests="46">
    <testcase classname="Selectors.Users getUserIdsInChannels" name="Selectors.Users getUserIdsInChannels" time="0">
    </testcase>
    <testcase classname="Selectors.Users getUserIdsNotInChannels" name="Selectors.Users getUserIdsNotInChannels" time="0">
    </testcase>
    <testcase classname="Selectors.Users getUserIdsInTeams" name="Selectors.Users getUserIdsInTeams" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users getUserIdsNotInTeams" name="Selectors.Users getUserIdsNotInTeams" time="0">
    </testcase>
    <testcase classname="Selectors.Users getUserIdsWithoutTeam" name="Selectors.Users getUserIdsWithoutTeam" time="0">
    </testcase>
    <testcase classname="Selectors.Users getUserSessions" name="Selectors.Users getUserSessions" time="0">
    </testcase>
    <testcase classname="Selectors.Users getUserAudits" name="Selectors.Users getUserAudits" time="0">
    </testcase>
    <testcase classname="Selectors.Users getUser" name="Selectors.Users getUser" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users getUsers" name="Selectors.Users getUsers" time="0">
    </testcase>
    <testcase classname="Selectors.Users getCurrentUserMentionKeys at mention" name="Selectors.Users getCurrentUserMentionKeys at mention" time="0">
    </testcase>
    <testcase classname="Selectors.Users getCurrentUserMentionKeys channel" name="Selectors.Users getCurrentUserMentionKeys channel" time="0">
    </testcase>
    <testcase classname="Selectors.Users getCurrentUserMentionKeys first name" name="Selectors.Users getCurrentUserMentionKeys first name" time="0">
    </testcase>
    <testcase classname="Selectors.Users getCurrentUserMentionKeys custom keys" name="Selectors.Users getCurrentUserMentionKeys custom keys" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users getProfiles getProfiles without filter" name="Selectors.Users getProfiles getProfiles without filter" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users getProfiles getProfiles with role filter" name="Selectors.Users getProfiles getProfiles with role filter" time="0">
    </testcase>
    <testcase classname="Selectors.Users getProfiles getProfiles with inactive" name="Selectors.Users getProfiles getProfiles with inactive" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users getProfiles getProfiles with multiple filters" name="Selectors.Users getProfiles getProfiles with multiple filters" time="0">
    </testcase>
    <testcase classname="Selectors.Users getProfilesInCurrentTeam" name="Selectors.Users getProfilesInCurrentTeam" time="0">
    </testcase>
    <testcase classname="Selectors.Users getProfilesInTeam getProfilesInTeam without filter" name="Selectors.Users getProfilesInTeam getProfilesInTeam without filter" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users getProfilesInTeam getProfilesInTeam with role filter" name="Selectors.Users getProfilesInTeam getProfilesInTeam with role filter" time="0">
    </testcase>
    <testcase classname="Selectors.Users getProfilesInTeam getProfilesInTeam with inactive filter" name="Selectors.Users getProfilesInTeam getProfilesInTeam with inactive filter" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users getProfilesInTeam getProfilesInTeam with multiple filters" name="Selectors.Users getProfilesInTeam getProfilesInTeam with multiple filters" time="0">
    </testcase>
    <testcase classname="Selectors.Users getProfilesNotInCurrentTeam" name="Selectors.Users getProfilesNotInCurrentTeam" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users getProfilesWithoutTeam getProfilesWithoutTeam" name="Selectors.Users getProfilesWithoutTeam getProfilesWithoutTeam" time="0">
    </testcase>
    <testcase classname="Selectors.Users getProfilesWithoutTeam getProfilesWithoutTeam with filter" name="Selectors.Users getProfilesWithoutTeam getProfilesWithoutTeam with filter" time="0">
    </testcase>
    <testcase classname="Selectors.Users searchProfiles searchProfiles without filter" name="Selectors.Users searchProfiles searchProfiles without filter" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users searchProfiles searchProfiles with filters" name="Selectors.Users searchProfiles searchProfiles with filters" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users searchProfilesInCurrentChannel" name="Selectors.Users searchProfilesInCurrentChannel" time="0">
    </testcase>
    <testcase classname="Selectors.Users searchProfilesNotInCurrentChannel" name="Selectors.Users searchProfilesNotInCurrentChannel" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users searchProfilesInCurrentTeam" name="Selectors.Users searchProfilesInCurrentTeam" time="0">
    </testcase>
    <testcase classname="Selectors.Users searchProfilesInTeam searchProfilesInTeam without filter" name="Selectors.Users searchProfilesInTeam searchProfilesInTeam without filter" time="0.004">
    </testcase>
    <testcase classname="Selectors.Users searchProfilesInTeam searchProfilesInTeam with filter" name="Selectors.Users searchProfilesInTeam searchProfilesInTeam with filter" time="0">
    </testcase>
    <testcase classname="Selectors.Users searchProfilesInTeam getProfiles with multiple filters" name="Selectors.Users searchProfilesInTeam getProfiles with multiple filters" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users searchProfilesNotInCurrentTeam" name="Selectors.Users searchProfilesNotInCurrentTeam" time="0">
    </testcase>
    <testcase classname="Selectors.Users searchProfilesWithoutTeam searchProfilesWithoutTeam without filter" name="Selectors.Users searchProfilesWithoutTeam searchProfilesWithoutTeam without filter" time="0">
    </testcase>
    <testcase classname="Selectors.Users searchProfilesWithoutTeam searchProfilesWithoutTeam with filter" name="Selectors.Users searchProfilesWithoutTeam searchProfilesWithoutTeam with filter" time="0">
    </testcase>
    <testcase classname="Selectors.Users isCurrentUserSystemAdmin" name="Selectors.Users isCurrentUserSystemAdmin" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users getUserByUsername" name="Selectors.Users getUserByUsername" time="0">
    </testcase>
    <testcase classname="Selectors.Users getUsersInVisibleDMs" name="Selectors.Users getUsersInVisibleDMs" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users getUserByEmail" name="Selectors.Users getUserByEmail" time="0">
    </testcase>
    <testcase classname="Selectors.Users makeGetProfilesInChannel" name="Selectors.Users makeGetProfilesInChannel" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users makeGetProfilesInChannel, unknown user id in channel" name="Selectors.Users makeGetProfilesInChannel, unknown user id in channel" time="0">
    </testcase>
    <testcase classname="Selectors.Users makeGetProfilesNotInChannel" name="Selectors.Users makeGetProfilesNotInChannel" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users makeGetProfilesByIdsAndUsernames" name="Selectors.Users makeGetProfilesByIdsAndUsernames" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users makeGetDisplayName" name="Selectors.Users makeGetDisplayName" time="0.001">
    </testcase>
    <testcase classname="Selectors.Users shouldShowTermsOfService" name="Selectors.Users shouldShowTermsOfService" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Selectors.Preferences" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:46" time="0.142" tests="34">
    <testcase classname="Selectors.Preferences get preference should return the requested value" name="Selectors.Preferences get preference should return the requested value" time="0.001">
    </testcase>
    <testcase classname="Selectors.Preferences get preference should fallback to the default if name unknown" name="Selectors.Preferences get preference should fallback to the default if name unknown" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get preference should fallback to the default if category unknown" name="Selectors.Preferences get preference should fallback to the default if category unknown" time="0.001">
    </testcase>
    <testcase classname="Selectors.Preferences get preference should fallback to the overridden default if name unknown" name="Selectors.Preferences get preference should fallback to the overridden default if name unknown" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get preference should fallback to the overridden default if category unknown" name="Selectors.Preferences get preference should fallback to the overridden default if category unknown" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get bool preference should return the requested value" name="Selectors.Preferences get bool preference should return the requested value" time="0.001">
    </testcase>
    <testcase classname="Selectors.Preferences get bool preference should fallback to the default if name unknown" name="Selectors.Preferences get bool preference should fallback to the default if name unknown" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get bool preference should fallback to the default if category unknown" name="Selectors.Preferences get bool preference should fallback to the default if category unknown" time="0.001">
    </testcase>
    <testcase classname="Selectors.Preferences get bool preference should fallback to the overridden default if name unknown" name="Selectors.Preferences get bool preference should fallback to the overridden default if name unknown" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get bool preference should fallback to the overridden default if category unknown" name="Selectors.Preferences get bool preference should fallback to the overridden default if category unknown" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get int preference should return the requested value" name="Selectors.Preferences get int preference should return the requested value" time="0.001">
    </testcase>
    <testcase classname="Selectors.Preferences get int preference should fallback to the default if name unknown" name="Selectors.Preferences get int preference should fallback to the default if name unknown" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get int preference should fallback to the default if category unknown" name="Selectors.Preferences get int preference should fallback to the default if category unknown" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get int preference should fallback to the overridden default if name unknown" name="Selectors.Preferences get int preference should fallback to the overridden default if name unknown" time="0.001">
    </testcase>
    <testcase classname="Selectors.Preferences get int preference should fallback to the overridden default if category unknown" name="Selectors.Preferences get int preference should fallback to the overridden default if category unknown" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get preferences by category" name="Selectors.Preferences get preferences by category" time="0.001">
    </testcase>
    <testcase classname="Selectors.Preferences get direct channel show preferences" name="Selectors.Preferences get direct channel show preferences" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get group channel show preferences" name="Selectors.Preferences get group channel show preferences" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get teammate name display setting" name="Selectors.Preferences get teammate name display setting" time="0.001">
    </testcase>
    <testcase classname="Selectors.Preferences get theme default theme" name="Selectors.Preferences get theme default theme" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get theme custom theme" name="Selectors.Preferences get theme custom theme" time="0.001">
    </testcase>
    <testcase classname="Selectors.Preferences get theme team-specific theme" name="Selectors.Preferences get theme team-specific theme" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get theme mentionBj backwards compatability theme" name="Selectors.Preferences get theme mentionBj backwards compatability theme" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get theme memoization" name="Selectors.Preferences get theme memoization" time="0.001">
    </testcase>
    <testcase classname="Selectors.Preferences get theme custom theme with upper case colours" name="Selectors.Preferences get theme custom theme with upper case colours" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get theme custom theme with missing colours" name="Selectors.Preferences get theme custom theme with missing colours" time="0.001">
    </testcase>
    <testcase classname="Selectors.Preferences get theme system theme with missing colours" name="Selectors.Preferences get theme system theme with missing colours" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get theme non-default system theme" name="Selectors.Preferences get theme non-default system theme" time="0.001">
    </testcase>
    <testcase classname="Selectors.Preferences get theme should return the server-configured theme by default" name="Selectors.Preferences get theme should return the server-configured theme by default" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get theme returns the &quot;default&quot; theme if the server-configured value is not present" name="Selectors.Preferences get theme returns the &quot;default&quot; theme if the server-configured value is not present" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get theme from style" name="Selectors.Preferences get theme from style" time="0.001">
    </testcase>
    <testcase classname="Selectors.Preferences get favorites names" name="Selectors.Preferences get favorites names" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get visible teammates" name="Selectors.Preferences get visible teammates" time="0">
    </testcase>
    <testcase classname="Selectors.Preferences get visible groups" name="Selectors.Preferences get visible groups" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Reducers.users" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:46" time="0.123" tests="24">
    <testcase classname="Reducers.users profilesInChannel initial state" name="Reducers.users profilesInChannel initial state" time="0.001">
    </testcase>
    <testcase classname="Reducers.users profilesInChannel UserTypes.RECEIVED_PROFILE_IN_CHANNEL, no existing profiles" name="Reducers.users profilesInChannel UserTypes.RECEIVED_PROFILE_IN_CHANNEL, no existing profiles" time="0">
    </testcase>
    <testcase classname="Reducers.users profilesInChannel UserTypes.RECEIVED_PROFILE_IN_CHANNEL, existing profiles" name="Reducers.users profilesInChannel UserTypes.RECEIVED_PROFILE_IN_CHANNEL, existing profiles" time="0.001">
    </testcase>
    <testcase classname="Reducers.users profilesInChannel UserTypes.RECEIVED_PROFILES_LIST_IN_CHANNEL, no existing profiles" name="Reducers.users profilesInChannel UserTypes.RECEIVED_PROFILES_LIST_IN_CHANNEL, no existing profiles" time="0">
    </testcase>
    <testcase classname="Reducers.users profilesInChannel UserTypes.RECEIVED_PROFILES_LIST_IN_CHANNEL, existing profiles" name="Reducers.users profilesInChannel UserTypes.RECEIVED_PROFILES_LIST_IN_CHANNEL, existing profiles" time="0">
    </testcase>
    <testcase classname="Reducers.users profilesInChannel UserTypes.RECEIVED_PROFILES_IN_CHANNEL, no existing profiles" name="Reducers.users profilesInChannel UserTypes.RECEIVED_PROFILES_IN_CHANNEL, no existing profiles" time="0.001">
    </testcase>
    <testcase classname="Reducers.users profilesInChannel UserTypes.RECEIVED_PROFILES_IN_CHANNEL, existing profiles" name="Reducers.users profilesInChannel UserTypes.RECEIVED_PROFILES_IN_CHANNEL, existing profiles" time="0">
    </testcase>
    <testcase classname="Reducers.users profilesInChannel UserTypes.RECEIVED_PROFILE_NOT_IN_CHANNEL, unknown user id" name="Reducers.users profilesInChannel UserTypes.RECEIVED_PROFILE_NOT_IN_CHANNEL, unknown user id" time="0.001">
    </testcase>
    <testcase classname="Reducers.users profilesInChannel UserTypes.RECEIVED_PROFILE_NOT_IN_CHANNEL, known user id" name="Reducers.users profilesInChannel UserTypes.RECEIVED_PROFILE_NOT_IN_CHANNEL, known user id" time="0">
    </testcase>
    <testcase classname="Reducers.users profilesInChannel ChannelTypes.CHANNEL_MEMBER_REMOVED, unknown user id" name="Reducers.users profilesInChannel ChannelTypes.CHANNEL_MEMBER_REMOVED, unknown user id" time="0">
    </testcase>
    <testcase classname="Reducers.users profilesInChannel ChannelTypes.CHANNEL_MEMBER_REMOVED, known user id" name="Reducers.users profilesInChannel ChannelTypes.CHANNEL_MEMBER_REMOVED, known user id" time="0.001">
    </testcase>
    <testcase classname="Reducers.users profilesInChannel UserTypes.LOGOUT_SUCCESS, existing profiles" name="Reducers.users profilesInChannel UserTypes.LOGOUT_SUCCESS, existing profiles" time="0">
    </testcase>
    <testcase classname="Reducers.users profilesNotInChannel initial state" name="Reducers.users profilesNotInChannel initial state" time="0.001">
    </testcase>
    <testcase classname="Reducers.users profilesNotInChannel UserTypes.RECEIVED_PROFILE_NOT_IN_CHANNEL, no existing profiles" name="Reducers.users profilesNotInChannel UserTypes.RECEIVED_PROFILE_NOT_IN_CHANNEL, no existing profiles" time="0">
    </testcase>
    <testcase classname="Reducers.users profilesNotInChannel UserTypes.RECEIVED_PROFILE_NOT_IN_CHANNEL, existing profiles" name="Reducers.users profilesNotInChannel UserTypes.RECEIVED_PROFILE_NOT_IN_CHANNEL, existing profiles" time="0">
    </testcase>
    <testcase classname="Reducers.users profilesNotInChannel UserTypes.RECEIVED_PROFILES_LIST_NOT_IN_CHANNEL, no existing profiles" name="Reducers.users profilesNotInChannel UserTypes.RECEIVED_PROFILES_LIST_NOT_IN_CHANNEL, no existing profiles" time="0.001">
    </testcase>
    <testcase classname="Reducers.users profilesNotInChannel UserTypes.RECEIVED_PROFILES_LIST_NOT_IN_CHANNEL, existing profiles" name="Reducers.users profilesNotInChannel UserTypes.RECEIVED_PROFILES_LIST_NOT_IN_CHANNEL, existing profiles" time="0">
    </testcase>
    <testcase classname="Reducers.users profilesNotInChannel UserTypes.RECEIVED_PROFILES_NOT_IN_CHANNEL, no existing profiles" name="Reducers.users profilesNotInChannel UserTypes.RECEIVED_PROFILES_NOT_IN_CHANNEL, no existing profiles" time="0">
    </testcase>
    <testcase classname="Reducers.users profilesNotInChannel UserTypes.RECEIVED_PROFILES_NOT_IN_CHANNEL, existing profiles" name="Reducers.users profilesNotInChannel UserTypes.RECEIVED_PROFILES_NOT_IN_CHANNEL, existing profiles" time="0.001">
    </testcase>
    <testcase classname="Reducers.users profilesNotInChannel UserTypes.RECEIVED_PROFILE_IN_CHANNEL, unknown user id" name="Reducers.users profilesNotInChannel UserTypes.RECEIVED_PROFILE_IN_CHANNEL, unknown user id" time="0">
    </testcase>
    <testcase classname="Reducers.users profilesNotInChannel UserTypes.RECEIVED_PROFILE_IN_CHANNEL, known user id" name="Reducers.users profilesNotInChannel UserTypes.RECEIVED_PROFILE_IN_CHANNEL, known user id" time="0.003">
    </testcase>
    <testcase classname="Reducers.users profilesNotInChannel ChannelTypes.CHANNEL_MEMBER_ADDED, unknown user id" name="Reducers.users profilesNotInChannel ChannelTypes.CHANNEL_MEMBER_ADDED, unknown user id" time="0">
    </testcase>
    <testcase classname="Reducers.users profilesNotInChannel ChannelTypes.CHANNEL_MEMBER_ADDED, known user id" name="Reducers.users profilesNotInChannel ChannelTypes.CHANNEL_MEMBER_ADDED, known user id" time="0">
    </testcase>
    <testcase classname="Reducers.users profilesNotInChannel UserTypes.LOGOUT_SUCCESS, existing profiles" name="Reducers.users profilesNotInChannel UserTypes.LOGOUT_SUCCESS, existing profiles" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Selectors.Teams" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:46" time="0.144" tests="23">
    <testcase classname="Selectors.Teams getTeamsList" name="Selectors.Teams getTeamsList" time="0.001">
    </testcase>
    <testcase classname="Selectors.Teams getMyTeams" name="Selectors.Teams getMyTeams" time="0">
    </testcase>
    <testcase classname="Selectors.Teams getMembersInCurrentTeam" name="Selectors.Teams getMembersInCurrentTeam" time="0">
    </testcase>
    <testcase classname="Selectors.Teams getTeamMember" name="Selectors.Teams getTeamMember" time="0.001">
    </testcase>
    <testcase classname="Selectors.Teams getJoinableTeams" name="Selectors.Teams getJoinableTeams" time="0">
    </testcase>
    <testcase classname="Selectors.Teams getSortedJoinableTeams" name="Selectors.Teams getSortedJoinableTeams" time="0.001">
    </testcase>
    <testcase classname="Selectors.Teams getListableTeams" name="Selectors.Teams getListableTeams" time="0.001">
    </testcase>
    <testcase classname="Selectors.Teams getListedJoinableTeams" name="Selectors.Teams getListedJoinableTeams" time="0">
    </testcase>
    <testcase classname="Selectors.Teams getJoinableTeamsUsingPermissions" name="Selectors.Teams getJoinableTeamsUsingPermissions" time="0.001">
    </testcase>
    <testcase classname="Selectors.Teams getSortedJoinableTeamsUsingPermissions" name="Selectors.Teams getSortedJoinableTeamsUsingPermissions" time="0">
    </testcase>
    <testcase classname="Selectors.Teams getListableTeamsUsingPermissions" name="Selectors.Teams getListableTeamsUsingPermissions" time="0.001">
    </testcase>
    <testcase classname="Selectors.Teams getSortedListableTeamsUsingPermissions" name="Selectors.Teams getSortedListableTeamsUsingPermissions" time="0">
    </testcase>
    <testcase classname="Selectors.Teams isCurrentUserCurrentTeamAdmin" name="Selectors.Teams isCurrentUserCurrentTeamAdmin" time="0.001">
    </testcase>
    <testcase classname="Selectors.Teams getMyTeamMember" name="Selectors.Teams getMyTeamMember" time="0">
    </testcase>
    <testcase classname="Selectors.Teams getTeam" name="Selectors.Teams getTeam" time="0.001">
    </testcase>
    <testcase classname="Selectors.Teams getJoinableTeamIds" name="Selectors.Teams getJoinableTeamIds" time="0">
    </testcase>
    <testcase classname="Selectors.Teams getMySortedTeamIds" name="Selectors.Teams getMySortedTeamIds" time="0.001">
    </testcase>
    <testcase classname="Selectors.Teams getMyTeamsCount" name="Selectors.Teams getMyTeamsCount" time="0">
    </testcase>
    <testcase classname="Selectors.Teams getChannelDrawerBadgeCount" name="Selectors.Teams getChannelDrawerBadgeCount" time="0.001">
    </testcase>
    <testcase classname="Selectors.Teams getTeamMentions" name="Selectors.Teams getTeamMentions" time="0">
    </testcase>
    <testcase classname="Selectors.Teams getCurrentRelativeTeamUrl" name="Selectors.Teams getCurrentRelativeTeamUrl" time="0">
    </testcase>
    <testcase classname="Selectors.Teams getCurrentTeamUrl" name="Selectors.Teams getCurrentTeamUrl" time="0.001">
    </testcase>
    <testcase classname="Selectors.Teams getCurrentTeamUrl with falsy currentTeam" name="Selectors.Teams getCurrentTeamUrl with falsy currentTeam" time="0">
    </testcase>
  </testsuite>
  <testsuite name="reducers/entities/files" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:46" time="0.128" tests="38">
    <testcase classname="reducers/entities/files files RECEIVED_NEW_POST no post metadata attribute" name="reducers/entities/files files RECEIVED_NEW_POST no post metadata attribute" time="0">
    </testcase>
    <testcase classname="reducers/entities/files files RECEIVED_NEW_POST empty post metadata attribute" name="reducers/entities/files files RECEIVED_NEW_POST empty post metadata attribute" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/files files RECEIVED_NEW_POST no files in post metadata" name="reducers/entities/files files RECEIVED_NEW_POST no files in post metadata" time="0">
    </testcase>
    <testcase classname="reducers/entities/files files RECEIVED_NEW_POST should save files" name="reducers/entities/files files RECEIVED_NEW_POST should save files" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/files files RECEIVED_POST no post metadata attribute" name="reducers/entities/files files RECEIVED_POST no post metadata attribute" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/files files RECEIVED_POST empty post metadata attribute" name="reducers/entities/files files RECEIVED_POST empty post metadata attribute" time="0">
    </testcase>
    <testcase classname="reducers/entities/files files RECEIVED_POST no files in post metadata" name="reducers/entities/files files RECEIVED_POST no files in post metadata" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/files files RECEIVED_POST should save files" name="reducers/entities/files files RECEIVED_POST should save files" time="0">
    </testcase>
    <testcase classname="reducers/entities/files files RECEIVED_POSTS no post metadata" name="reducers/entities/files files RECEIVED_POSTS no post metadata" time="0">
    </testcase>
    <testcase classname="reducers/entities/files files RECEIVED_POSTS no files in post metadata" name="reducers/entities/files files RECEIVED_POSTS no files in post metadata" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/files files RECEIVED_POSTS should save files" name="reducers/entities/files files RECEIVED_POSTS should save files" time="0">
    </testcase>
    <testcase classname="reducers/entities/files files RECEIVED_POSTS should save files for multiple posts" name="reducers/entities/files files RECEIVED_POSTS should save files for multiple posts" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_NEW_POST no post metadata no previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_NEW_POST no post metadata no previous state" time="0">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_NEW_POST no post metadata with previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_NEW_POST no post metadata with previous state" time="0">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_NEW_POST no files property in post metadata no previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_NEW_POST no files property in post metadata no previous state" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_NEW_POST no files property in post metadata with previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_NEW_POST no files property in post metadata with previous state" time="0">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_NEW_POST empty files property in post metadata no previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_NEW_POST empty files property in post metadata no previous state" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_NEW_POST empty files property in post metadata with previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_NEW_POST empty files property in post metadata with previous state" time="0">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_NEW_POST new files no previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_NEW_POST new files no previous state" time="0">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_NEW_POST new files with previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_NEW_POST new files with previous state" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POST no post metadata no previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_POST no post metadata no previous state" time="0.003">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POST no post metadata with previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_POST no post metadata with previous state" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POST no files property in post metadata no previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_POST no files property in post metadata no previous state" time="0">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POST no files property in post metadata with previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_POST no files property in post metadata with previous state" time="0">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POST empty files property in post metadata no previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_POST empty files property in post metadata no previous state" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POST empty files property in post metadata with previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_POST empty files property in post metadata with previous state" time="0">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POST new files no previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_POST new files no previous state" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POST new files with previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_POST new files with previous state" time="0">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POSTS no post metadata no previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_POSTS no post metadata no previous state" time="0">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POSTS no post metadata with previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_POSTS no post metadata with previous state" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POSTS no files property in post metadata no previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_POSTS no files property in post metadata no previous state" time="0">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POSTS no files property in post metadata with previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_POSTS no files property in post metadata with previous state" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POSTS empty files property in post metadata no previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_POSTS empty files property in post metadata no previous state" time="0">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POSTS empty files property in post metadata with previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_POSTS empty files property in post metadata with previous state" time="0">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POSTS new files for single post no previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_POSTS new files for single post no previous state" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POSTS new files for single post with previous state" name="reducers/entities/files fileIdsByPostId RECEIVED_POSTS new files for single post with previous state" time="0">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POSTS should save files for multiple posts no previous state for post1" name="reducers/entities/files fileIdsByPostId RECEIVED_POSTS should save files for multiple posts no previous state for post1" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/files fileIdsByPostId RECEIVED_POSTS should save files for multiple posts previous state for post1" name="reducers/entities/files fileIdsByPostId RECEIVED_POSTS should save files for multiple posts previous state for post1" time="0">
    </testcase>
  </testsuite>
  <testsuite name="ChannelUtils" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:46" time="0.111" tests="6">
    <testcase classname="ChannelUtils canManageMembersOldPermissions" name="ChannelUtils canManageMembersOldPermissions" time="0.001">
    </testcase>
    <testcase classname="ChannelUtils isAutoClosed" name="ChannelUtils isAutoClosed" time="0">
    </testcase>
    <testcase classname="ChannelUtils areChannelMentionsIgnored" name="ChannelUtils areChannelMentionsIgnored" time="0.001">
    </testcase>
    <testcase classname="ChannelUtils filterChannelsMatchingTerm" name="ChannelUtils filterChannelsMatchingTerm" time="0">
    </testcase>
    <testcase classname="ChannelUtils sortChannelsByRecency" name="ChannelUtils sortChannelsByRecency" time="0.001">
    </testcase>
    <testcase classname="ChannelUtils sortChannelsByDisplayName" name="ChannelUtils sortChannelsByDisplayName" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Emojis" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:46" time="0.333" tests="11">
    <testcase classname="Actions.Emojis createCustomEmoji" name="Actions.Emojis createCustomEmoji" time="0.01">
    </testcase>
    <testcase classname="Actions.Emojis getCustomEmojis" name="Actions.Emojis getCustomEmojis" time="0.009">
    </testcase>
    <testcase classname="Actions.Emojis getAllCustomEmojis" name="Actions.Emojis getAllCustomEmojis" time="0.023">
    </testcase>
    <testcase classname="Actions.Emojis deleteCustomEmoji" name="Actions.Emojis deleteCustomEmoji" time="0.007">
    </testcase>
    <testcase classname="Actions.Emojis loadProfilesForCustomEmojis" name="Actions.Emojis loadProfilesForCustomEmojis" time="0.005">
    </testcase>
    <testcase classname="Actions.Emojis searchCustomEmojis" name="Actions.Emojis searchCustomEmojis" time="0.009">
    </testcase>
    <testcase classname="Actions.Emojis autocompleteCustomEmojis" name="Actions.Emojis autocompleteCustomEmojis" time="0.009">
    </testcase>
    <testcase classname="Actions.Emojis getCustomEmoji" name="Actions.Emojis getCustomEmoji" time="0.008">
    </testcase>
    <testcase classname="Actions.Emojis getCustomEmojiByName" name="Actions.Emojis getCustomEmojiByName" time="0.01">
    </testcase>
    <testcase classname="Actions.Emojis getCustomEmojisByName" name="Actions.Emojis getCustomEmojisByName" time="0.009">
    </testcase>
    <testcase classname="Actions.Emojis getCustomEmojisInText" name="Actions.Emojis getCustomEmojisInText" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Preferences" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:47" time="0.239" tests="6">
    <testcase classname="Actions.Preferences getMyPreferences" name="Actions.Preferences getMyPreferences" time="0.009">
    </testcase>
    <testcase classname="Actions.Preferences savePrefrences" name="Actions.Preferences savePrefrences" time="0.008">
    </testcase>
    <testcase classname="Actions.Preferences deletePreferences" name="Actions.Preferences deletePreferences" time="0.008">
    </testcase>
    <testcase classname="Actions.Preferences makeDirectChannelVisibleIfNecessary" name="Actions.Preferences makeDirectChannelVisibleIfNecessary" time="0.024">
    </testcase>
    <testcase classname="Actions.Preferences saveTheme" name="Actions.Preferences saveTheme" time="0.011">
    </testcase>
    <testcase classname="Actions.Preferences deleteTeamSpecificThemes" name="Actions.Preferences deleteTeamSpecificThemes" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="Selectors.Roles" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:47" time="0.124" tests="12">
    <testcase classname="Selectors.Roles should return my roles by scope on getMyRoles/getMySystemRoles/getMyTeamRoles/getMyChannelRoles" name="Selectors.Roles should return my roles by scope on getMyRoles/getMySystemRoles/getMyTeamRoles/getMyChannelRoles" time="0.001">
    </testcase>
    <testcase classname="Selectors.Roles should return current loaded roles on getRoles" name="Selectors.Roles should return current loaded roles on getRoles" time="0">
    </testcase>
    <testcase classname="Selectors.Roles should return my system permission on getMySystemPermissions" name="Selectors.Roles should return my system permission on getMySystemPermissions" time="0.001">
    </testcase>
    <testcase classname="Selectors.Roles should return if i have a system permission on haveISystemPermission" name="Selectors.Roles should return if i have a system permission on haveISystemPermission" time="0">
    </testcase>
    <testcase classname="Selectors.Roles should return my team permission on getMyTeamPermissions" name="Selectors.Roles should return my team permission on getMyTeamPermissions" time="0.001">
    </testcase>
    <testcase classname="Selectors.Roles should return if i have a team permission on haveITeamPermission" name="Selectors.Roles should return if i have a team permission on haveITeamPermission" time="0">
    </testcase>
    <testcase classname="Selectors.Roles should return my team permission on getMyCurrentTeamPermissions" name="Selectors.Roles should return my team permission on getMyCurrentTeamPermissions" time="0">
    </testcase>
    <testcase classname="Selectors.Roles should return if i have a team permission on haveICurrentTeamPermission" name="Selectors.Roles should return if i have a team permission on haveICurrentTeamPermission" time="0.001">
    </testcase>
    <testcase classname="Selectors.Roles should return my channel permission on getMyChannelPermissions" name="Selectors.Roles should return my channel permission on getMyChannelPermissions" time="0">
    </testcase>
    <testcase classname="Selectors.Roles should return if i have a channel permission on haveIChannelPermission" name="Selectors.Roles should return if i have a channel permission on haveIChannelPermission" time="0.001">
    </testcase>
    <testcase classname="Selectors.Roles should return my current channel permission on getMyCurrentChannelPermissions" name="Selectors.Roles should return my current channel permission on getMyCurrentChannelPermissions" time="0">
    </testcase>
    <testcase classname="Selectors.Roles should return if i have a channel permission on haveICurrentChannelPermission" name="Selectors.Roles should return if i have a channel permission on haveICurrentChannelPermission" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Selectors.General" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:47" time="0.096" tests="7">
    <testcase classname="Selectors.General canUploadFilesOnMobile" name="Selectors.General canUploadFilesOnMobile" time="0.001">
    </testcase>
    <testcase classname="Selectors.General canDownloadFilesOnMobile" name="Selectors.General canDownloadFilesOnMobile" time="0">
    </testcase>
    <testcase classname="Selectors.General hasNewPermissions" name="Selectors.General hasNewPermissions" time="0.002">
    </testcase>
    <testcase classname="Selectors.General getAutolinkedUrlSchemes setting doesn&apos;t exist" name="Selectors.General getAutolinkedUrlSchemes setting doesn&apos;t exist" time="0">
    </testcase>
    <testcase classname="Selectors.General getAutolinkedUrlSchemes no custom url schemes" name="Selectors.General getAutolinkedUrlSchemes no custom url schemes" time="0">
    </testcase>
    <testcase classname="Selectors.General getAutolinkedUrlSchemes one custom url scheme" name="Selectors.General getAutolinkedUrlSchemes one custom url scheme" time="0">
    </testcase>
    <testcase classname="Selectors.General getAutolinkedUrlSchemes multiple custom url schemes" name="Selectors.General getAutolinkedUrlSchemes multiple custom url schemes" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="reducers.entities.search" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:47" time="0.088" tests="11">
    <testcase classname="reducers.entities.search results initial state" name="reducers.entities.search results initial state" time="0">
    </testcase>
    <testcase classname="reducers.entities.search results SearchTypes.RECEIVED_SEARCH_POSTS first results received" name="reducers.entities.search results SearchTypes.RECEIVED_SEARCH_POSTS first results received" time="0">
    </testcase>
    <testcase classname="reducers.entities.search results SearchTypes.RECEIVED_SEARCH_POSTS multiple results received" name="reducers.entities.search results SearchTypes.RECEIVED_SEARCH_POSTS multiple results received" time="0.001">
    </testcase>
    <testcase classname="reducers.entities.search results PostTypes.POST_REMOVED post in results" name="reducers.entities.search results PostTypes.POST_REMOVED post in results" time="0">
    </testcase>
    <testcase classname="reducers.entities.search results PostTypes.POST_REMOVED post not in results" name="reducers.entities.search results PostTypes.POST_REMOVED post not in results" time="0.001">
    </testcase>
    <testcase classname="reducers.entities.search matches initial state" name="reducers.entities.search matches initial state" time="0">
    </testcase>
    <testcase classname="reducers.entities.search matches SearchTypes.RECEIVED_SEARCH_POSTS no matches received" name="reducers.entities.search matches SearchTypes.RECEIVED_SEARCH_POSTS no matches received" time="0">
    </testcase>
    <testcase classname="reducers.entities.search matches SearchTypes.RECEIVED_SEARCH_POSTS first results received" name="reducers.entities.search matches SearchTypes.RECEIVED_SEARCH_POSTS first results received" time="0">
    </testcase>
    <testcase classname="reducers.entities.search matches SearchTypes.RECEIVED_SEARCH_POSTS multiple results received" name="reducers.entities.search matches SearchTypes.RECEIVED_SEARCH_POSTS multiple results received" time="0">
    </testcase>
    <testcase classname="reducers.entities.search matches PostTypes.POST_REMOVED post in results" name="reducers.entities.search matches PostTypes.POST_REMOVED post in results" time="0.001">
    </testcase>
    <testcase classname="reducers.entities.search matches PostTypes.POST_REMOVED post not in results" name="reducers.entities.search matches PostTypes.POST_REMOVED post not in results" time="0">
    </testcase>
  </testsuite>
  <testsuite name="reducers/entities/emojis" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:47" time="0.142" tests="16">
    <testcase classname="reducers/entities/emojis customEmoji RECEIVED_NEW_POST no post metadata" name="reducers/entities/emojis customEmoji RECEIVED_NEW_POST no post metadata" time="0">
    </testcase>
    <testcase classname="reducers/entities/emojis customEmoji RECEIVED_NEW_POST no emojis in post metadata" name="reducers/entities/emojis customEmoji RECEIVED_NEW_POST no emojis in post metadata" time="0">
    </testcase>
    <testcase classname="reducers/entities/emojis customEmoji RECEIVED_NEW_POST should save custom emojis" name="reducers/entities/emojis customEmoji RECEIVED_NEW_POST should save custom emojis" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/emojis customEmoji RECEIVED_NEW_POST should not save custom emojis that are already loaded" name="reducers/entities/emojis customEmoji RECEIVED_NEW_POST should not save custom emojis that are already loaded" time="0">
    </testcase>
    <testcase classname="reducers/entities/emojis customEmoji RECEIVED_NEW_POST should handle a mix of custom emojis that are and are not loaded" name="reducers/entities/emojis customEmoji RECEIVED_NEW_POST should handle a mix of custom emojis that are and are not loaded" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/emojis customEmoji RECEIVED_POST no post metadata" name="reducers/entities/emojis customEmoji RECEIVED_POST no post metadata" time="0">
    </testcase>
    <testcase classname="reducers/entities/emojis customEmoji RECEIVED_POST no emojis in post metadata" name="reducers/entities/emojis customEmoji RECEIVED_POST no emojis in post metadata" time="0">
    </testcase>
    <testcase classname="reducers/entities/emojis customEmoji RECEIVED_POST should save custom emojis" name="reducers/entities/emojis customEmoji RECEIVED_POST should save custom emojis" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/emojis customEmoji RECEIVED_POST should not save custom emojis that are already loaded" name="reducers/entities/emojis customEmoji RECEIVED_POST should not save custom emojis that are already loaded" time="0">
    </testcase>
    <testcase classname="reducers/entities/emojis customEmoji RECEIVED_POST should handle a mix of custom emojis that are and are not loaded" name="reducers/entities/emojis customEmoji RECEIVED_POST should handle a mix of custom emojis that are and are not loaded" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/emojis customEmoji RECEIVED_POSTS no post metadata" name="reducers/entities/emojis customEmoji RECEIVED_POSTS no post metadata" time="0">
    </testcase>
    <testcase classname="reducers/entities/emojis customEmoji RECEIVED_POSTS no emojis in post metadata" name="reducers/entities/emojis customEmoji RECEIVED_POSTS no emojis in post metadata" time="0">
    </testcase>
    <testcase classname="reducers/entities/emojis customEmoji RECEIVED_POSTS should save custom emojis" name="reducers/entities/emojis customEmoji RECEIVED_POSTS should save custom emojis" time="0.001">
    </testcase>
    <testcase classname="reducers/entities/emojis customEmoji RECEIVED_POSTS should not save custom emojis that are already loaded" name="reducers/entities/emojis customEmoji RECEIVED_POSTS should not save custom emojis that are already loaded" time="0">
    </testcase>
    <testcase classname="reducers/entities/emojis customEmoji RECEIVED_POSTS should handle a mix of custom emojis that are and are not loaded" name="reducers/entities/emojis customEmoji RECEIVED_POSTS should handle a mix of custom emojis that are and are not loaded" time="0">
    </testcase>
    <testcase classname="reducers/entities/emojis customEmoji RECEIVED_POSTS should save emojis from multiple posts" name="reducers/entities/emojis customEmoji RECEIVED_POSTS should save emojis from multiple posts" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Files" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:47" time="0.241" tests="4">
    <testcase classname="Actions.Files uploadFile" name="Actions.Files uploadFile" time="0.01">
    </testcase>
    <testcase classname="Actions.Files getFilesForPost" name="Actions.Files getFilesForPost" time="0.011">
    </testcase>
    <testcase classname="Actions.Files getMissingFilesForPost" name="Actions.Files getMissingFilesForPost" time="0.013">
    </testcase>
    <testcase classname="Actions.Files getFilePublicLink" name="Actions.Files getFilePublicLink" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Actions.General" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:47" time="0.555" tests="10">
    <testcase classname="Actions.General getPing - Invalid URL" name="Actions.General getPing - Invalid URL" time="0.007">
    </testcase>
    <testcase classname="Actions.General getPing" name="Actions.General getPing" time="0.006">
    </testcase>
    <testcase classname="Actions.General getClientConfig" name="Actions.General getClientConfig" time="0.01">
    </testcase>
    <testcase classname="Actions.General getLicenseConfig" name="Actions.General getLicenseConfig" time="0.004">
    </testcase>
    <testcase classname="Actions.General setServerVersion" name="Actions.General setServerVersion" time="0.103">
    </testcase>
    <testcase classname="Actions.General getDataRetentionPolicy" name="Actions.General getDataRetentionPolicy" time="0.122">
    </testcase>
    <testcase classname="Actions.General getTimezones" name="Actions.General getTimezones" time="0.106">
    </testcase>
    <testcase classname="Actions.General getRedirectLocation new server" name="Actions.General getRedirectLocation new server" time="0.025">
    </testcase>
    <testcase classname="Actions.General getRedirectLocation old server" name="Actions.General getRedirectLocation old server" time="0.011">
    </testcase>
    <testcase classname="Actions.General getRedirectLocation should save the correct location" name="Actions.General getRedirectLocation should save the correct location" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="Reducers.Typing" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:48" time="0.101" tests="3">
    <testcase classname="Reducers.Typing initial state" name="Reducers.Typing initial state" time="0.001">
    </testcase>
    <testcase classname="Reducers.Typing WebsocketEvents.TYPING" name="Reducers.Typing WebsocketEvents.TYPING" time="0.001">
    </testcase>
    <testcase classname="Reducers.Typing WebsocketEvents.STOP_TYPING" name="Reducers.Typing WebsocketEvents.STOP_TYPING" time="0">
    </testcase>
  </testsuite>
  <testsuite name="user utils" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:48" time="0.091" tests="27">
    <testcase classname="user utils displayUsername should return username" name="user utils displayUsername should return username" time="0">
    </testcase>
    <testcase classname="user utils displayUsername should return nickname" name="user utils displayUsername should return nickname" time="0.001">
    </testcase>
    <testcase classname="user utils displayUsername should return fullname when no nick name" name="user utils displayUsername should return fullname when no nick name" time="0">
    </testcase>
    <testcase classname="user utils displayUsername should return username when no nick name and no full name" name="user utils displayUsername should return username when no nick name and no full name" time="0.004">
    </testcase>
    <testcase classname="user utils displayUsername should return fullname" name="user utils displayUsername should return fullname" time="0">
    </testcase>
    <testcase classname="user utils displayUsername should return username when no full name" name="user utils displayUsername should return username when no full name" time="0.001">
    </testcase>
    <testcase classname="user utils displayUsername should return default username string" name="user utils displayUsername should return default username string" time="0">
    </testcase>
    <testcase classname="user utils displayUsername should return empty string when user does not exist and useDefaultUserName param is false" name="user utils displayUsername should return empty string when user does not exist and useDefaultUserName param is false" time="0">
    </testcase>
    <testcase classname="user utils filterProfilesMatchingTerm should match all for empty filter" name="user utils filterProfilesMatchingTerm should match all for empty filter" time="0">
    </testcase>
    <testcase classname="user utils filterProfilesMatchingTerm should filter out results which do not match" name="user utils filterProfilesMatchingTerm should filter out results which do not match" time="0">
    </testcase>
    <testcase classname="user utils filterProfilesMatchingTerm should match by username" name="user utils filterProfilesMatchingTerm should match by username" time="0.001">
    </testcase>
    <testcase classname="user utils filterProfilesMatchingTerm should match by split part of the username" name="user utils filterProfilesMatchingTerm should match by split part of the username" time="0">
    </testcase>
    <testcase classname="user utils filterProfilesMatchingTerm should match by firstname" name="user utils filterProfilesMatchingTerm should match by firstname" time="0.001">
    </testcase>
    <testcase classname="user utils filterProfilesMatchingTerm should match by lastname prefix" name="user utils filterProfilesMatchingTerm should match by lastname prefix" time="0">
    </testcase>
    <testcase classname="user utils filterProfilesMatchingTerm should match by lastname fully" name="user utils filterProfilesMatchingTerm should match by lastname fully" time="0">
    </testcase>
    <testcase classname="user utils filterProfilesMatchingTerm should match by fullname prefix" name="user utils filterProfilesMatchingTerm should match by fullname prefix" time="0.001">
    </testcase>
    <testcase classname="user utils filterProfilesMatchingTerm should match by fullname fully" name="user utils filterProfilesMatchingTerm should match by fullname fully" time="0">
    </testcase>
    <testcase classname="user utils filterProfilesMatchingTerm should match by fullname case-insensitive" name="user utils filterProfilesMatchingTerm should match by fullname case-insensitive" time="0.001">
    </testcase>
    <testcase classname="user utils filterProfilesMatchingTerm should match by nickname" name="user utils filterProfilesMatchingTerm should match by nickname" time="0">
    </testcase>
    <testcase classname="user utils filterProfilesMatchingTerm should not match by nickname substring" name="user utils filterProfilesMatchingTerm should not match by nickname substring" time="0">
    </testcase>
    <testcase classname="user utils filterProfilesMatchingTerm should match by email prefix" name="user utils filterProfilesMatchingTerm should match by email prefix" time="0.001">
    </testcase>
    <testcase classname="user utils filterProfilesMatchingTerm should match by email domain" name="user utils filterProfilesMatchingTerm should match by email domain" time="0">
    </testcase>
    <testcase classname="user utils filterProfilesMatchingTerm should match by full email" name="user utils filterProfilesMatchingTerm should match by full email" time="0">
    </testcase>
    <testcase classname="user utils filterProfilesMatchingTerm should ignore leading @ for username" name="user utils filterProfilesMatchingTerm should ignore leading @ for username" time="0.001">
    </testcase>
    <testcase classname="user utils filterProfilesMatchingTerm should ignore leading @ for firstname" name="user utils filterProfilesMatchingTerm should ignore leading @ for firstname" time="0">
    </testcase>
    <testcase classname="user utils Utils.getSuggestionsSplitBy correct suggestions when splitting by a character" name="user utils Utils.getSuggestionsSplitBy correct suggestions when splitting by a character" time="0.001">
    </testcase>
    <testcase classname="user utils Utils.getSuggestionsSplitByMultiple correct suggestions when splitting by multiple characters" name="user utils Utils.getSuggestionsSplitByMultiple correct suggestions when splitting by multiple characters" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Selectors.Groups" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:48" time="0.116" tests="4">
    <testcase classname="Selectors.Groups getGroupsAssociatedToTeam" name="Selectors.Groups getGroupsAssociatedToTeam" time="0.001">
    </testcase>
    <testcase classname="Selectors.Groups getGroupsNotAssociatedToTeam" name="Selectors.Groups getGroupsNotAssociatedToTeam" time="0.001">
    </testcase>
    <testcase classname="Selectors.Groups getGroupsAssociatedToChannel" name="Selectors.Groups getGroupsAssociatedToChannel" time="0.001">
    </testcase>
    <testcase classname="Selectors.Groups getGroupsNotAssociatedToChannel" name="Selectors.Groups getGroupsNotAssociatedToChannel" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Search" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:48" time="0.206" tests="1">
    <testcase classname="Actions.Search Perform Search" name="Actions.Search Perform Search" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Bots" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:49" time="0.22" tests="7">
    <testcase classname="Actions.Bots loadBots" name="Actions.Bots loadBots" time="0.007">
    </testcase>
    <testcase classname="Actions.Bots loadBot" name="Actions.Bots loadBot" time="0.006">
    </testcase>
    <testcase classname="Actions.Bots createBot" name="Actions.Bots createBot" time="0.006">
    </testcase>
    <testcase classname="Actions.Bots patchBot" name="Actions.Bots patchBot" time="0.006">
    </testcase>
    <testcase classname="Actions.Bots disableBot" name="Actions.Bots disableBot" time="0.009">
    </testcase>
    <testcase classname="Actions.Bots assignBot" name="Actions.Bots assignBot" time="0.009">
    </testcase>
    <testcase classname="Actions.Bots logout" name="Actions.Bots logout" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Roles" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:49" time="0.156" tests="5">
    <testcase classname="Actions.Roles getRolesByNames" name="Actions.Roles getRolesByNames" time="0.007">
    </testcase>
    <testcase classname="Actions.Roles getRoleByName" name="Actions.Roles getRoleByName" time="0.006">
    </testcase>
    <testcase classname="Actions.Roles getRole" name="Actions.Roles getRole" time="0.006">
    </testcase>
    <testcase classname="Actions.Roles loadRolesIfNeeded" name="Actions.Roles loadRolesIfNeeded" time="0.006">
    </testcase>
    <testcase classname="Actions.Roles editRole" name="Actions.Roles editRole" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="channels" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:49" time="0.067" tests="6">
    <testcase classname="channels RECEIVED_CHANNEL_DELETED should mark channel as deleted" name="channels RECEIVED_CHANNEL_DELETED should mark channel as deleted" time="0.002">
    </testcase>
    <testcase classname="channels RECEIVED_CHANNEL_DELETED should do nothing for a channel that is not loaded" name="channels RECEIVED_CHANNEL_DELETED should do nothing for a channel that is not loaded" time="0">
    </testcase>
    <testcase classname="channels UPDATE_CHANNEL_HEADER should update channel header" name="channels UPDATE_CHANNEL_HEADER should update channel header" time="0.001">
    </testcase>
    <testcase classname="channels UPDATE_CHANNEL_HEADER should do nothing for a channel that is not loaded" name="channels UPDATE_CHANNEL_HEADER should do nothing for a channel that is not loaded" time="0">
    </testcase>
    <testcase classname="channels UPDATE_CHANNEL_PURPOSE should update channel purpose" name="channels UPDATE_CHANNEL_PURPOSE should update channel purpose" time="0.001">
    </testcase>
    <testcase classname="channels UPDATE_CHANNEL_PURPOSE should do nothing for a channel that is not loaded" name="channels UPDATE_CHANNEL_PURPOSE should do nothing for a channel that is not loaded" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Reducers.teams.myMembers" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:49" time="0.091" tests="5">
    <testcase classname="Reducers.teams.myMembers initial state" name="Reducers.teams.myMembers initial state" time="0">
    </testcase>
    <testcase classname="Reducers.teams.myMembers RECEIVED_MY_TEAM_MEMBER" name="Reducers.teams.myMembers RECEIVED_MY_TEAM_MEMBER" time="0.001">
    </testcase>
    <testcase classname="Reducers.teams.myMembers RECEIVED_MY_TEAM_MEMBERS" name="Reducers.teams.myMembers RECEIVED_MY_TEAM_MEMBERS" time="0.001">
    </testcase>
    <testcase classname="Reducers.teams.myMembers RECEIVED_TEAMS_LIST" name="Reducers.teams.myMembers RECEIVED_TEAMS_LIST" time="0">
    </testcase>
    <testcase classname="Reducers.teams.myMembers RECEIVED_TEAMS" name="Reducers.teams.myMembers RECEIVED_TEAMS" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Jobs" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:49" time="0.16" tests="5">
    <testcase classname="Actions.Jobs createJob" name="Actions.Jobs createJob" time="0.007">
    </testcase>
    <testcase classname="Actions.Jobs getJob" name="Actions.Jobs getJob" time="0.006">
    </testcase>
    <testcase classname="Actions.Jobs cancelJob" name="Actions.Jobs cancelJob" time="0.005">
    </testcase>
    <testcase classname="Actions.Jobs getJobs" name="Actions.Jobs getJobs" time="0.005">
    </testcase>
    <testcase classname="Actions.Jobs getJobsByType" name="Actions.Jobs getJobsByType" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Helpers" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:49" time="0.116" tests="5">
    <testcase classname="Actions.Helpers forceLogoutIfNecessary should do nothing when passed a client error" name="Actions.Helpers forceLogoutIfNecessary should do nothing when passed a client error" time="0.005">
    </testcase>
    <testcase classname="Actions.Helpers forceLogoutIfNecessary should do nothing when passed a non-401 server error" name="Actions.Helpers forceLogoutIfNecessary should do nothing when passed a non-401 server error" time="0.004">
    </testcase>
    <testcase classname="Actions.Helpers forceLogoutIfNecessary should trigger logout when passed a 401 server error" name="Actions.Helpers forceLogoutIfNecessary should trigger logout when passed a 401 server error" time="0.004">
    </testcase>
    <testcase classname="Actions.Helpers forceLogoutIfNecessary should do nothing when failing to log in" name="Actions.Helpers forceLogoutIfNecessary should do nothing when failing to log in" time="0.004">
    </testcase>
    <testcase classname="Actions.Helpers forceLogoutIfNecessary should do nothing when not logged in" name="Actions.Helpers forceLogoutIfNecessary should do nothing when not logged in" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Schemes" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:49" time="0.182" tests="5">
    <testcase classname="Actions.Schemes getSchemes" name="Actions.Schemes getSchemes" time="0.007">
    </testcase>
    <testcase classname="Actions.Schemes createScheme" name="Actions.Schemes createScheme" time="0.005">
    </testcase>
    <testcase classname="Actions.Schemes getScheme" name="Actions.Schemes getScheme" time="0.007">
    </testcase>
    <testcase classname="Actions.Schemes patchScheme" name="Actions.Schemes patchScheme" time="0.005">
    </testcase>
    <testcase classname="Actions.Schemes deleteScheme" name="Actions.Schemes deleteScheme" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="Helpers" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:50" time="0.052" tests="3">
    <testcase classname="Helpers isMinimumServerVersion" name="Helpers isMinimumServerVersion" time="0.001">
    </testcase>
    <testcase classname="Helpers buildQueryString" name="Helpers buildQueryString" time="0">
    </testcase>
    <testcase classname="Utils.isEmail " name="Utils.isEmail " time="0">
    </testcase>
  </testsuite>
  <testsuite name="FileUtils" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:50" time="0.089" tests="6">
    <testcase classname="FileUtils getFileUrl" name="FileUtils getFileUrl" time="0.001">
    </testcase>
    <testcase classname="FileUtils getFileDownloadUrl" name="FileUtils getFileDownloadUrl" time="0">
    </testcase>
    <testcase classname="FileUtils getFileThumbnailUrl" name="FileUtils getFileThumbnailUrl" time="0.001">
    </testcase>
    <testcase classname="FileUtils getFilePreviewUrl" name="FileUtils getFilePreviewUrl" time="0">
    </testcase>
    <testcase classname="FileUtils sortFileInfos" name="FileUtils sortFileInfos" time="0.001">
    </testcase>
    <testcase classname="FileUtils lookupMimeType" name="FileUtils lookupMimeType" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="integration utils" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:50" time="0.078" tests="12">
    <testcase classname="integration utils checkDialogElementForError should return null error on optional text element" name="integration utils checkDialogElementForError should return null error on optional text element" time="0">
    </testcase>
    <testcase classname="integration utils checkDialogElementForError should return null error on optional textarea element" name="integration utils checkDialogElementForError should return null error on optional textarea element" time="0.001">
    </testcase>
    <testcase classname="integration utils checkDialogElementForError should return error on required element" name="integration utils checkDialogElementForError should return error on required element" time="0">
    </testcase>
    <testcase classname="integration utils checkDialogElementForError should return error on too short text element" name="integration utils checkDialogElementForError should return error on too short text element" time="0">
    </testcase>
    <testcase classname="integration utils checkDialogElementForError should return null on good number element" name="integration utils checkDialogElementForError should return null on good number element" time="0.001">
    </testcase>
    <testcase classname="integration utils checkDialogElementForError should return error on bad number element" name="integration utils checkDialogElementForError should return error on bad number element" time="0">
    </testcase>
    <testcase classname="integration utils checkDialogElementForError should return null on good email element" name="integration utils checkDialogElementForError should return null on good email element" time="0">
    </testcase>
    <testcase classname="integration utils checkDialogElementForError should return error on bad email element" name="integration utils checkDialogElementForError should return error on bad email element" time="0.001">
    </testcase>
    <testcase classname="integration utils checkDialogElementForError should return null on good url element" name="integration utils checkDialogElementForError should return null on good url element" time="0">
    </testcase>
    <testcase classname="integration utils checkDialogElementForError should return error on bad url element" name="integration utils checkDialogElementForError should return error on bad url element" time="0">
    </testcase>
    <testcase classname="integration utils checkIfErrorsMatchElements should pass as returned error matches an element" name="integration utils checkIfErrorsMatchElements should pass as returned error matches an element" time="0.001">
    </testcase>
    <testcase classname="integration utils checkIfErrorsMatchElements should fail as returned errors do not match an element" name="integration utils checkIfErrorsMatchElements should fail as returned errors do not match an element" time="0">
    </testcase>
  </testsuite>
  <testsuite name="EmojiUtils" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:50" time="0.123" tests="6">
    <testcase classname="EmojiUtils parseNeededCustomEmojisFromText no emojis" name="EmojiUtils parseNeededCustomEmojisFromText no emojis" time="0.001">
    </testcase>
    <testcase classname="EmojiUtils parseNeededCustomEmojisFromText some emojis" name="EmojiUtils parseNeededCustomEmojisFromText some emojis" time="0">
    </testcase>
    <testcase classname="EmojiUtils parseNeededCustomEmojisFromText text surrounding emojis" name="EmojiUtils parseNeededCustomEmojisFromText text surrounding emojis" time="0">
    </testcase>
    <testcase classname="EmojiUtils parseNeededCustomEmojisFromText system emojis" name="EmojiUtils parseNeededCustomEmojisFromText system emojis" time="0.001">
    </testcase>
    <testcase classname="EmojiUtils parseNeededCustomEmojisFromText custom emojis" name="EmojiUtils parseNeededCustomEmojisFromText custom emojis" time="0">
    </testcase>
    <testcase classname="EmojiUtils parseNeededCustomEmojisFromText emojis that we&apos;ve already tried to load" name="EmojiUtils parseNeededCustomEmojisFromText emojis that we&apos;ve already tried to load" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Selectors.Schemes" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:50" time="0.129" tests="6">
    <testcase classname="Selectors.Schemes getSchemes" name="Selectors.Schemes getSchemes" time="0.001">
    </testcase>
    <testcase classname="Selectors.Schemes getScheme" name="Selectors.Schemes getScheme" time="0.001">
    </testcase>
    <testcase classname="Selectors.Schemes makeGetSchemeChannels" name="Selectors.Schemes makeGetSchemeChannels" time="0">
    </testcase>
    <testcase classname="Selectors.Schemes makeGetSchemeChannels with team scope scheme" name="Selectors.Schemes makeGetSchemeChannels with team scope scheme" time="0.002">
    </testcase>
    <testcase classname="Selectors.Schemes makeGetSchemeTeams" name="Selectors.Schemes makeGetSchemeTeams" time="0.001">
    </testcase>
    <testcase classname="Selectors.Schemes getSchemeTeams with channel scope scheme" name="Selectors.Schemes getSchemeTeams with channel scope scheme" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Client4" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:50" time="0.088" tests="2">
    <testcase classname="Client4 doFetchWithResponse serverVersion should be set from response header" name="Client4 doFetchWithResponse serverVersion should be set from response header" time="0.006">
    </testcase>
    <testcase classname="ClientError standard fields should be enumerable" name="ClientError standard fields should be enumerable" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Selectors.Integrations" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:50" time="0.088" tests="3">
    <testcase classname="Selectors.Integrations should return outgoing hooks in current team" name="Selectors.Integrations should return outgoing hooks in current team" time="0">
    </testcase>
    <testcase classname="Selectors.Integrations should get all commands" name="Selectors.Integrations should get all commands" time="0.001">
    </testcase>
    <testcase classname="Selectors.Integrations should get all autocomplete commands by teamId" name="Selectors.Integrations should get all autocomplete commands by teamId" time="0">
    </testcase>
  </testsuite>
  <testsuite name="user utils" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:50" time="0.07" tests="1">
    <testcase classname="user utils should return username" name="user utils should return username" time="0">
    </testcase>
  </testsuite>
  <testsuite name="ThemeUtils" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:50" time="0.072" tests="8">
    <testcase classname="ThemeUtils getComponents hex color" name="ThemeUtils getComponents hex color" time="0.001">
    </testcase>
    <testcase classname="ThemeUtils getComponents 3 digit hex color" name="ThemeUtils getComponents 3 digit hex color" time="0">
    </testcase>
    <testcase classname="ThemeUtils getComponents hex color with leading number sign" name="ThemeUtils getComponents hex color with leading number sign" time="0">
    </testcase>
    <testcase classname="ThemeUtils getComponents rgb" name="ThemeUtils getComponents rgb" time="0.001">
    </testcase>
    <testcase classname="ThemeUtils getComponents rgba" name="ThemeUtils getComponents rgba" time="0">
    </testcase>
    <testcase classname="ThemeUtils changeOpacity hex color" name="ThemeUtils changeOpacity hex color" time="0.001">
    </testcase>
    <testcase classname="ThemeUtils changeOpacity rgb" name="ThemeUtils changeOpacity rgb" time="0">
    </testcase>
    <testcase classname="ThemeUtils changeOpacity rgba" name="ThemeUtils changeOpacity rgba" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Selectors.I18n" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:50" time="0.075" tests="4">
    <testcase classname="Selectors.I18n getCurrentUserLocale not logged in" name="Selectors.I18n getCurrentUserLocale not logged in" time="0">
    </testcase>
    <testcase classname="Selectors.I18n getCurrentUserLocale current user not loaded" name="Selectors.I18n getCurrentUserLocale current user not loaded" time="0.001">
    </testcase>
    <testcase classname="Selectors.I18n getCurrentUserLocale current user without locale set" name="Selectors.I18n getCurrentUserLocale current user without locale set" time="0">
    </testcase>
    <testcase classname="Selectors.I18n getCurrentUserLocale current user with locale set" name="Selectors.I18n getCurrentUserLocale current user with locale set" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Errors" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:51" time="0.111" tests="1">
    <testcase classname="Actions.Errors logError should hit /logs endpoint, unless server error" name="Actions.Errors logError should hit /logs endpoint, unless server error" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Actions.Alerts" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:51" time="0.112" tests="1">
    <testcase classname="Actions.Alerts push and clear alerts" name="Actions.Alerts push and clear alerts" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Selectors.Alerts" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:51" time="0.073" tests="5">
    <testcase classname="Selectors.Alerts should return all alerts" name="Selectors.Alerts should return all alerts" time="0.001">
    </testcase>
    <testcase classname="Selectors.Alerts should return latest alert" name="Selectors.Alerts should return latest alert" time="0">
    </testcase>
    <testcase classname="Selectors.Alerts should return latest notification alert" name="Selectors.Alerts should return latest notification alert" time="0.001">
    </testcase>
    <testcase classname="Selectors.Alerts should return latest developer alert" name="Selectors.Alerts should return latest developer alert" time="0.001">
    </testcase>
    <testcase classname="Selectors.Alerts should return latest error alert" name="Selectors.Alerts should return latest error alert" time="0">
    </testcase>
  </testsuite>
  <testsuite name="utils/sentry" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:51" time="0.058" tests="4">
    <testcase classname="utils/sentry cleanUrlForLogging should remove server URL" name="utils/sentry cleanUrlForLogging should remove server URL" time="0.001">
    </testcase>
    <testcase classname="utils/sentry cleanUrlForLogging should filter user IDs" name="utils/sentry cleanUrlForLogging should filter user IDs" time="0">
    </testcase>
    <testcase classname="utils/sentry cleanUrlForLogging should filter email addresses" name="utils/sentry cleanUrlForLogging should filter email addresses" time="0.001">
    </testcase>
    <testcase classname="utils/sentry cleanUrlForLogging should filter query parameters" name="utils/sentry cleanUrlForLogging should filter query parameters" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Selectors.Integrations" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:51" time="0.068" tests="1">
    <testcase classname="Selectors.Integrations should get sorted emoji ids" name="Selectors.Integrations should get sorted emoji ids" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Sanity test" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:51" time="0.529" tests="3">
    <testcase classname="Sanity test Promise" name="Sanity test Promise" time="0">
    </testcase>
    <testcase classname="Sanity test async/await" name="Sanity test async/await" time="0.001">
    </testcase>
    <testcase classname="Sanity test fetch" name="Sanity test fetch" time="0.485">
    </testcase>
  </testsuite>
  <testsuite name="ReducerRegistry" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:52" time="0.09" tests="2">
    <testcase classname="ReducerRegistry register reducer" name="ReducerRegistry register reducer" time="0.005">
    </testcase>
    <testcase classname="ReducerRegistry get reducers" name="ReducerRegistry get reducers" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Selectors.Search" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:52" time="0.087" tests="1">
    <testcase classname="Selectors.Search should return current search for current team" name="Selectors.Search should return current search for current team" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="i18n utils" errors="0" failures="0" skipped="0" timestamp="2019-06-30T09:59:52" time="0.042" tests="2">
    <testcase classname="i18n utils should return default message" name="i18n utils should return default message" time="0.001">
    </testcase>
    <testcase classname="i18n utils should return previously set Localized function return value" name="i18n utils should return previously set Localized function return value" time="0">
    </testcase>
  </testsuite>
</testsuites>